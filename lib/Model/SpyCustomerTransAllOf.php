<?php
/**
 * SpyCustomerTransAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Microsoft Business Center API
 *
 * The Microsoft Business Center API is a RESTful API that provides an interface to the Microsoft Business Center service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\MsbcRestClient\Model;

use \ArrayAccess;
use \Spy\MsbcRestClient\ObjectSerializer;

/**
 * SpyCustomerTransAllOf Class Doc Comment
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpyCustomerTransAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SpyCustomerTransAllOfModelFields
      */
    public static function GetModelFields(): SpyCustomerTransAllOfModelFields
    {
        return new SpyCustomerTransAllOfModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SpyCustomerTransAllOfModelAttributes
      */
    public static function GetModelAttributes(): SpyCustomerTransAllOfModelAttributes
    {
        return new SpyCustomerTransAllOfModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpyCustomerTrans_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_no' => 'int',
        'posting_date' => 'string',
        'document_type' => 'string',
        'document_no' => 'string',
        'customer_no' => 'string',
        'customer_name' => 'string',
        'description' => 'string',
        'global_dimension_1_code' => 'string',
        'global_dimension_2_code' => 'string',
        'customer_posting_group' => 'string',
        'ic_partner_code' => 'string',
        'salesperson_code' => 'string',
        'currency_code' => 'string',
        'original_amount' => 'float',
        'original_amt_lcy' => 'float',
        'amount' => 'float',
        'amount_lcy' => 'float',
        'debit_amount' => 'float',
        'debit_amount_lcy' => 'float',
        'credit_amount' => 'float',
        'credit_amount_lcy' => 'float',
        'remaining_amount' => 'float',
        'remaining_amt_lcy' => 'float',
        'sales_lcy' => 'float',
        'bal_account_type' => 'string',
        'bal_account_no' => 'string',
        'due_date' => 'string',
        'payment_prediction' => 'string',
        'prediction_confidence' => 'string',
        'prediction_confidence_percent' => 'float',
        'pmt_discount_date' => 'string',
        'pmt_disc_tolerance_date' => 'string',
        'original_pmt_disc_possible' => 'float',
        'remaining_pmt_disc_possible' => 'float',
        'max_payment_tolerance' => 'float',
        'payment_method_code' => 'string',
        'open' => 'bool',
        'on_hold' => 'string',
        'user_id' => 'string',
        'source_code' => 'string',
        'reason_code' => 'string',
        'reversed' => 'bool',
        'reversed_by_entry_no' => 'int',
        'reversed_entry_no' => 'int',
        'exported_to_payment_file' => 'bool',
        'message_to_recipient' => 'string',
        'direct_debit_mandate_id' => 'string',
        'dimension_set_id' => 'int',
        'external_document_no' => 'string',
        'recipient_bank_account' => 'string',
        'shortcut_dimension_3_code' => 'string',
        'shortcut_dimension_4_code' => 'string',
        'shortcut_dimension_5_code' => 'string',
        'shortcut_dimension_6_code' => 'string',
        'shortcut_dimension_7_code' => 'string',
        'shortcut_dimension_8_code' => 'string',
        'date_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_no' => null,
        'posting_date' => null,
        'document_type' => null,
        'document_no' => null,
        'customer_no' => null,
        'customer_name' => null,
        'description' => null,
        'global_dimension_1_code' => null,
        'global_dimension_2_code' => null,
        'customer_posting_group' => null,
        'ic_partner_code' => null,
        'salesperson_code' => null,
        'currency_code' => null,
        'original_amount' => null,
        'original_amt_lcy' => null,
        'amount' => null,
        'amount_lcy' => null,
        'debit_amount' => null,
        'debit_amount_lcy' => null,
        'credit_amount' => null,
        'credit_amount_lcy' => null,
        'remaining_amount' => null,
        'remaining_amt_lcy' => null,
        'sales_lcy' => null,
        'bal_account_type' => null,
        'bal_account_no' => null,
        'due_date' => null,
        'payment_prediction' => null,
        'prediction_confidence' => null,
        'prediction_confidence_percent' => null,
        'pmt_discount_date' => null,
        'pmt_disc_tolerance_date' => null,
        'original_pmt_disc_possible' => null,
        'remaining_pmt_disc_possible' => null,
        'max_payment_tolerance' => null,
        'payment_method_code' => null,
        'open' => null,
        'on_hold' => null,
        'user_id' => null,
        'source_code' => null,
        'reason_code' => null,
        'reversed' => null,
        'reversed_by_entry_no' => null,
        'reversed_entry_no' => null,
        'exported_to_payment_file' => null,
        'message_to_recipient' => null,
        'direct_debit_mandate_id' => null,
        'dimension_set_id' => null,
        'external_document_no' => null,
        'recipient_bank_account' => null,
        'shortcut_dimension_3_code' => null,
        'shortcut_dimension_4_code' => null,
        'shortcut_dimension_5_code' => null,
        'shortcut_dimension_6_code' => null,
        'shortcut_dimension_7_code' => null,
        'shortcut_dimension_8_code' => null,
        'date_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_no' => false,
		'posting_date' => false,
		'document_type' => false,
		'document_no' => false,
		'customer_no' => false,
		'customer_name' => false,
		'description' => false,
		'global_dimension_1_code' => false,
		'global_dimension_2_code' => false,
		'customer_posting_group' => false,
		'ic_partner_code' => false,
		'salesperson_code' => false,
		'currency_code' => false,
		'original_amount' => false,
		'original_amt_lcy' => false,
		'amount' => false,
		'amount_lcy' => false,
		'debit_amount' => false,
		'debit_amount_lcy' => false,
		'credit_amount' => false,
		'credit_amount_lcy' => false,
		'remaining_amount' => false,
		'remaining_amt_lcy' => false,
		'sales_lcy' => false,
		'bal_account_type' => false,
		'bal_account_no' => false,
		'due_date' => false,
		'payment_prediction' => false,
		'prediction_confidence' => false,
		'prediction_confidence_percent' => false,
		'pmt_discount_date' => false,
		'pmt_disc_tolerance_date' => false,
		'original_pmt_disc_possible' => false,
		'remaining_pmt_disc_possible' => false,
		'max_payment_tolerance' => false,
		'payment_method_code' => false,
		'open' => false,
		'on_hold' => false,
		'user_id' => false,
		'source_code' => false,
		'reason_code' => false,
		'reversed' => false,
		'reversed_by_entry_no' => false,
		'reversed_entry_no' => false,
		'exported_to_payment_file' => false,
		'message_to_recipient' => false,
		'direct_debit_mandate_id' => false,
		'dimension_set_id' => false,
		'external_document_no' => false,
		'recipient_bank_account' => false,
		'shortcut_dimension_3_code' => false,
		'shortcut_dimension_4_code' => false,
		'shortcut_dimension_5_code' => false,
		'shortcut_dimension_6_code' => false,
		'shortcut_dimension_7_code' => false,
		'shortcut_dimension_8_code' => false,
		'date_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_no' => 'Entry_No',
        'posting_date' => 'Posting_Date',
        'document_type' => 'Document_Type',
        'document_no' => 'Document_No',
        'customer_no' => 'Customer_No',
        'customer_name' => 'Customer_Name',
        'description' => 'Description',
        'global_dimension_1_code' => 'Global_Dimension_1_Code',
        'global_dimension_2_code' => 'Global_Dimension_2_Code',
        'customer_posting_group' => 'Customer_Posting_Group',
        'ic_partner_code' => 'IC_Partner_Code',
        'salesperson_code' => 'Salesperson_Code',
        'currency_code' => 'Currency_Code',
        'original_amount' => 'Original_Amount',
        'original_amt_lcy' => 'Original_Amt_LCY',
        'amount' => 'Amount',
        'amount_lcy' => 'Amount_LCY',
        'debit_amount' => 'Debit_Amount',
        'debit_amount_lcy' => 'Debit_Amount_LCY',
        'credit_amount' => 'Credit_Amount',
        'credit_amount_lcy' => 'Credit_Amount_LCY',
        'remaining_amount' => 'Remaining_Amount',
        'remaining_amt_lcy' => 'Remaining_Amt_LCY',
        'sales_lcy' => 'Sales_LCY',
        'bal_account_type' => 'Bal_Account_Type',
        'bal_account_no' => 'Bal_Account_No',
        'due_date' => 'Due_Date',
        'payment_prediction' => 'Payment_Prediction',
        'prediction_confidence' => 'Prediction_Confidence',
        'prediction_confidence_percent' => 'Prediction_Confidence_Percent',
        'pmt_discount_date' => 'Pmt_Discount_Date',
        'pmt_disc_tolerance_date' => 'Pmt_Disc_Tolerance_Date',
        'original_pmt_disc_possible' => 'Original_Pmt_Disc_Possible',
        'remaining_pmt_disc_possible' => 'Remaining_Pmt_Disc_Possible',
        'max_payment_tolerance' => 'Max_Payment_Tolerance',
        'payment_method_code' => 'Payment_Method_Code',
        'open' => 'Open',
        'on_hold' => 'On_Hold',
        'user_id' => 'User_ID',
        'source_code' => 'Source_Code',
        'reason_code' => 'Reason_Code',
        'reversed' => 'Reversed',
        'reversed_by_entry_no' => 'Reversed_by_Entry_No',
        'reversed_entry_no' => 'Reversed_Entry_No',
        'exported_to_payment_file' => 'Exported_to_Payment_File',
        'message_to_recipient' => 'Message_to_Recipient',
        'direct_debit_mandate_id' => 'Direct_Debit_Mandate_ID',
        'dimension_set_id' => 'Dimension_Set_ID',
        'external_document_no' => 'External_Document_No',
        'recipient_bank_account' => 'RecipientBankAccount',
        'shortcut_dimension_3_code' => 'Shortcut_Dimension_3_Code',
        'shortcut_dimension_4_code' => 'Shortcut_Dimension_4_Code',
        'shortcut_dimension_5_code' => 'Shortcut_Dimension_5_Code',
        'shortcut_dimension_6_code' => 'Shortcut_Dimension_6_Code',
        'shortcut_dimension_7_code' => 'Shortcut_Dimension_7_Code',
        'shortcut_dimension_8_code' => 'Shortcut_Dimension_8_Code',
        'date_filter' => 'Date_Filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_no' => 'setEntryNo',
        'posting_date' => 'setPostingDate',
        'document_type' => 'setDocumentType',
        'document_no' => 'setDocumentNo',
        'customer_no' => 'setCustomerNo',
        'customer_name' => 'setCustomerName',
        'description' => 'setDescription',
        'global_dimension_1_code' => 'setGlobalDimension1Code',
        'global_dimension_2_code' => 'setGlobalDimension2Code',
        'customer_posting_group' => 'setCustomerPostingGroup',
        'ic_partner_code' => 'setIcPartnerCode',
        'salesperson_code' => 'setSalespersonCode',
        'currency_code' => 'setCurrencyCode',
        'original_amount' => 'setOriginalAmount',
        'original_amt_lcy' => 'setOriginalAmtLcy',
        'amount' => 'setAmount',
        'amount_lcy' => 'setAmountLcy',
        'debit_amount' => 'setDebitAmount',
        'debit_amount_lcy' => 'setDebitAmountLcy',
        'credit_amount' => 'setCreditAmount',
        'credit_amount_lcy' => 'setCreditAmountLcy',
        'remaining_amount' => 'setRemainingAmount',
        'remaining_amt_lcy' => 'setRemainingAmtLcy',
        'sales_lcy' => 'setSalesLcy',
        'bal_account_type' => 'setBalAccountType',
        'bal_account_no' => 'setBalAccountNo',
        'due_date' => 'setDueDate',
        'payment_prediction' => 'setPaymentPrediction',
        'prediction_confidence' => 'setPredictionConfidence',
        'prediction_confidence_percent' => 'setPredictionConfidencePercent',
        'pmt_discount_date' => 'setPmtDiscountDate',
        'pmt_disc_tolerance_date' => 'setPmtDiscToleranceDate',
        'original_pmt_disc_possible' => 'setOriginalPmtDiscPossible',
        'remaining_pmt_disc_possible' => 'setRemainingPmtDiscPossible',
        'max_payment_tolerance' => 'setMaxPaymentTolerance',
        'payment_method_code' => 'setPaymentMethodCode',
        'open' => 'setOpen',
        'on_hold' => 'setOnHold',
        'user_id' => 'setUserId',
        'source_code' => 'setSourceCode',
        'reason_code' => 'setReasonCode',
        'reversed' => 'setReversed',
        'reversed_by_entry_no' => 'setReversedByEntryNo',
        'reversed_entry_no' => 'setReversedEntryNo',
        'exported_to_payment_file' => 'setExportedToPaymentFile',
        'message_to_recipient' => 'setMessageToRecipient',
        'direct_debit_mandate_id' => 'setDirectDebitMandateId',
        'dimension_set_id' => 'setDimensionSetId',
        'external_document_no' => 'setExternalDocumentNo',
        'recipient_bank_account' => 'setRecipientBankAccount',
        'shortcut_dimension_3_code' => 'setShortcutDimension3Code',
        'shortcut_dimension_4_code' => 'setShortcutDimension4Code',
        'shortcut_dimension_5_code' => 'setShortcutDimension5Code',
        'shortcut_dimension_6_code' => 'setShortcutDimension6Code',
        'shortcut_dimension_7_code' => 'setShortcutDimension7Code',
        'shortcut_dimension_8_code' => 'setShortcutDimension8Code',
        'date_filter' => 'setDateFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_no' => 'getEntryNo',
        'posting_date' => 'getPostingDate',
        'document_type' => 'getDocumentType',
        'document_no' => 'getDocumentNo',
        'customer_no' => 'getCustomerNo',
        'customer_name' => 'getCustomerName',
        'description' => 'getDescription',
        'global_dimension_1_code' => 'getGlobalDimension1Code',
        'global_dimension_2_code' => 'getGlobalDimension2Code',
        'customer_posting_group' => 'getCustomerPostingGroup',
        'ic_partner_code' => 'getIcPartnerCode',
        'salesperson_code' => 'getSalespersonCode',
        'currency_code' => 'getCurrencyCode',
        'original_amount' => 'getOriginalAmount',
        'original_amt_lcy' => 'getOriginalAmtLcy',
        'amount' => 'getAmount',
        'amount_lcy' => 'getAmountLcy',
        'debit_amount' => 'getDebitAmount',
        'debit_amount_lcy' => 'getDebitAmountLcy',
        'credit_amount' => 'getCreditAmount',
        'credit_amount_lcy' => 'getCreditAmountLcy',
        'remaining_amount' => 'getRemainingAmount',
        'remaining_amt_lcy' => 'getRemainingAmtLcy',
        'sales_lcy' => 'getSalesLcy',
        'bal_account_type' => 'getBalAccountType',
        'bal_account_no' => 'getBalAccountNo',
        'due_date' => 'getDueDate',
        'payment_prediction' => 'getPaymentPrediction',
        'prediction_confidence' => 'getPredictionConfidence',
        'prediction_confidence_percent' => 'getPredictionConfidencePercent',
        'pmt_discount_date' => 'getPmtDiscountDate',
        'pmt_disc_tolerance_date' => 'getPmtDiscToleranceDate',
        'original_pmt_disc_possible' => 'getOriginalPmtDiscPossible',
        'remaining_pmt_disc_possible' => 'getRemainingPmtDiscPossible',
        'max_payment_tolerance' => 'getMaxPaymentTolerance',
        'payment_method_code' => 'getPaymentMethodCode',
        'open' => 'getOpen',
        'on_hold' => 'getOnHold',
        'user_id' => 'getUserId',
        'source_code' => 'getSourceCode',
        'reason_code' => 'getReasonCode',
        'reversed' => 'getReversed',
        'reversed_by_entry_no' => 'getReversedByEntryNo',
        'reversed_entry_no' => 'getReversedEntryNo',
        'exported_to_payment_file' => 'getExportedToPaymentFile',
        'message_to_recipient' => 'getMessageToRecipient',
        'direct_debit_mandate_id' => 'getDirectDebitMandateId',
        'dimension_set_id' => 'getDimensionSetId',
        'external_document_no' => 'getExternalDocumentNo',
        'recipient_bank_account' => 'getRecipientBankAccount',
        'shortcut_dimension_3_code' => 'getShortcutDimension3Code',
        'shortcut_dimension_4_code' => 'getShortcutDimension4Code',
        'shortcut_dimension_5_code' => 'getShortcutDimension5Code',
        'shortcut_dimension_6_code' => 'getShortcutDimension6Code',
        'shortcut_dimension_7_code' => 'getShortcutDimension7Code',
        'shortcut_dimension_8_code' => 'getShortcutDimension8Code',
        'date_filter' => 'getDateFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_TYPE_SPACE_1 = ' ';
    public const DOCUMENT_TYPE_PAYMENT = 'Payment';
    public const DOCUMENT_TYPE_INVOICE = 'Invoice';
    public const DOCUMENT_TYPE_CREDIT_MEMO = 'Credit Memo';
    public const DOCUMENT_TYPE_FINANCE_CHARGE_MEMO = 'Finance Charge Memo';
    public const DOCUMENT_TYPE_REMINDER = 'Reminder';
    public const DOCUMENT_TYPE_REFUND = 'Refund';
    public const BAL_ACCOUNT_TYPE_G_L_ACCOUNT = 'G/L Account';
    public const BAL_ACCOUNT_TYPE_CUSTOMER = 'Customer';
    public const BAL_ACCOUNT_TYPE_VENDOR = 'Vendor';
    public const BAL_ACCOUNT_TYPE_BANK_ACCOUNT = 'Bank Account';
    public const BAL_ACCOUNT_TYPE_FIXED_ASSET = 'Fixed Asset';
    public const BAL_ACCOUNT_TYPE_IC_PARTNER = 'IC Partner';
    public const BAL_ACCOUNT_TYPE_EMPLOYEE = 'Employee';
    public const PAYMENT_PREDICTION_SPACE_1 = ' ';
    public const PAYMENT_PREDICTION_LATE = 'Late';
    public const PAYMENT_PREDICTION_ON_TIME = 'On-Time';
    public const PREDICTION_CONFIDENCE_SPACE_1 = ' ';
    public const PREDICTION_CONFIDENCE_LOW = 'Low';
    public const PREDICTION_CONFIDENCE_MEDIUM = 'Medium';
    public const PREDICTION_CONFIDENCE_HIGH = 'High';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_SPACE_1,
            self::DOCUMENT_TYPE_PAYMENT,
            self::DOCUMENT_TYPE_INVOICE,
            self::DOCUMENT_TYPE_CREDIT_MEMO,
            self::DOCUMENT_TYPE_FINANCE_CHARGE_MEMO,
            self::DOCUMENT_TYPE_REMINDER,
            self::DOCUMENT_TYPE_REFUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBalAccountTypeAllowableValues()
    {
        return [
            self::BAL_ACCOUNT_TYPE_G_L_ACCOUNT,
            self::BAL_ACCOUNT_TYPE_CUSTOMER,
            self::BAL_ACCOUNT_TYPE_VENDOR,
            self::BAL_ACCOUNT_TYPE_BANK_ACCOUNT,
            self::BAL_ACCOUNT_TYPE_FIXED_ASSET,
            self::BAL_ACCOUNT_TYPE_IC_PARTNER,
            self::BAL_ACCOUNT_TYPE_EMPLOYEE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentPredictionAllowableValues()
    {
        return [
            self::PAYMENT_PREDICTION_SPACE_1,
            self::PAYMENT_PREDICTION_LATE,
            self::PAYMENT_PREDICTION_ON_TIME,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPredictionConfidenceAllowableValues()
    {
        return [
            self::PREDICTION_CONFIDENCE_SPACE_1,
            self::PREDICTION_CONFIDENCE_LOW,
            self::PREDICTION_CONFIDENCE_MEDIUM,
            self::PREDICTION_CONFIDENCE_HIGH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_no', $data ?? [], null);
        $this->setIfExists('posting_date', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_no', $data ?? [], null);
        $this->setIfExists('customer_no', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('global_dimension_1_code', $data ?? [], null);
        $this->setIfExists('global_dimension_2_code', $data ?? [], null);
        $this->setIfExists('customer_posting_group', $data ?? [], null);
        $this->setIfExists('ic_partner_code', $data ?? [], null);
        $this->setIfExists('salesperson_code', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('original_amount', $data ?? [], null);
        $this->setIfExists('original_amt_lcy', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_lcy', $data ?? [], null);
        $this->setIfExists('debit_amount', $data ?? [], null);
        $this->setIfExists('debit_amount_lcy', $data ?? [], null);
        $this->setIfExists('credit_amount', $data ?? [], null);
        $this->setIfExists('credit_amount_lcy', $data ?? [], null);
        $this->setIfExists('remaining_amount', $data ?? [], null);
        $this->setIfExists('remaining_amt_lcy', $data ?? [], null);
        $this->setIfExists('sales_lcy', $data ?? [], null);
        $this->setIfExists('bal_account_type', $data ?? [], null);
        $this->setIfExists('bal_account_no', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('payment_prediction', $data ?? [], null);
        $this->setIfExists('prediction_confidence', $data ?? [], null);
        $this->setIfExists('prediction_confidence_percent', $data ?? [], null);
        $this->setIfExists('pmt_discount_date', $data ?? [], null);
        $this->setIfExists('pmt_disc_tolerance_date', $data ?? [], null);
        $this->setIfExists('original_pmt_disc_possible', $data ?? [], null);
        $this->setIfExists('remaining_pmt_disc_possible', $data ?? [], null);
        $this->setIfExists('max_payment_tolerance', $data ?? [], null);
        $this->setIfExists('payment_method_code', $data ?? [], null);
        $this->setIfExists('open', $data ?? [], null);
        $this->setIfExists('on_hold', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('source_code', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('reversed', $data ?? [], null);
        $this->setIfExists('reversed_by_entry_no', $data ?? [], null);
        $this->setIfExists('reversed_entry_no', $data ?? [], null);
        $this->setIfExists('exported_to_payment_file', $data ?? [], null);
        $this->setIfExists('message_to_recipient', $data ?? [], null);
        $this->setIfExists('direct_debit_mandate_id', $data ?? [], null);
        $this->setIfExists('dimension_set_id', $data ?? [], null);
        $this->setIfExists('external_document_no', $data ?? [], null);
        $this->setIfExists('recipient_bank_account', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_3_code', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_4_code', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_5_code', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_6_code', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_7_code', $data ?? [], null);
        $this->setIfExists('shortcut_dimension_8_code', $data ?? [], null);
        $this->setIfExists('date_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBalAccountTypeAllowableValues();
        if (!is_null($this->container['bal_account_type']) && !in_array($this->container['bal_account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bal_account_type', must be one of '%s'",
                $this->container['bal_account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentPredictionAllowableValues();
        if (!is_null($this->container['payment_prediction']) && !in_array($this->container['payment_prediction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_prediction', must be one of '%s'",
                $this->container['payment_prediction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPredictionConfidenceAllowableValues();
        if (!is_null($this->container['prediction_confidence']) && !in_array($this->container['prediction_confidence'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'prediction_confidence', must be one of '%s'",
                $this->container['prediction_confidence'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_no
     *
     * @return int|null
     */
    public function getEntryNo()
    {
        return $this->container['entry_no'];
    }

    /**
     * Sets entry_no
     *
     * @param int|null $entry_no entry_no
     *
     * @return self
     */
    public function setEntryNo($entry_no)
    {
        if (is_null($entry_no)) {
            throw new \InvalidArgumentException('non-nullable entry_no cannot be null');
        }
        $this->container['entry_no'] = $entry_no;

        return $this;
    }

    /**
     * Gets posting_date
     *
     * @return string|null
     */
    public function getPostingDate()
    {
        return $this->container['posting_date'];
    }

    /**
     * Sets posting_date
     *
     * @param string|null $posting_date posting_date
     *
     * @return self
     */
    public function setPostingDate($posting_date)
    {
        if (is_null($posting_date)) {
            throw new \InvalidArgumentException('non-nullable posting_date cannot be null');
        }
        $this->container['posting_date'] = $posting_date;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_no
     *
     * @return string|null
     */
    public function getDocumentNo()
    {
        return $this->container['document_no'];
    }

    /**
     * Sets document_no
     *
     * @param string|null $document_no document_no
     *
     * @return self
     */
    public function setDocumentNo($document_no)
    {
        if (is_null($document_no)) {
            throw new \InvalidArgumentException('non-nullable document_no cannot be null');
        }
        $this->container['document_no'] = $document_no;

        return $this;
    }

    /**
     * Gets customer_no
     *
     * @return string|null
     */
    public function getCustomerNo()
    {
        return $this->container['customer_no'];
    }

    /**
     * Sets customer_no
     *
     * @param string|null $customer_no customer_no
     *
     * @return self
     */
    public function setCustomerNo($customer_no)
    {
        if (is_null($customer_no)) {
            throw new \InvalidArgumentException('non-nullable customer_no cannot be null');
        }
        $this->container['customer_no'] = $customer_no;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets global_dimension_1_code
     *
     * @return string|null
     */
    public function getGlobalDimension1Code()
    {
        return $this->container['global_dimension_1_code'];
    }

    /**
     * Sets global_dimension_1_code
     *
     * @param string|null $global_dimension_1_code global_dimension_1_code
     *
     * @return self
     */
    public function setGlobalDimension1Code($global_dimension_1_code)
    {
        if (is_null($global_dimension_1_code)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_1_code cannot be null');
        }
        $this->container['global_dimension_1_code'] = $global_dimension_1_code;

        return $this;
    }

    /**
     * Gets global_dimension_2_code
     *
     * @return string|null
     */
    public function getGlobalDimension2Code()
    {
        return $this->container['global_dimension_2_code'];
    }

    /**
     * Sets global_dimension_2_code
     *
     * @param string|null $global_dimension_2_code global_dimension_2_code
     *
     * @return self
     */
    public function setGlobalDimension2Code($global_dimension_2_code)
    {
        if (is_null($global_dimension_2_code)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_2_code cannot be null');
        }
        $this->container['global_dimension_2_code'] = $global_dimension_2_code;

        return $this;
    }

    /**
     * Gets customer_posting_group
     *
     * @return string|null
     */
    public function getCustomerPostingGroup()
    {
        return $this->container['customer_posting_group'];
    }

    /**
     * Sets customer_posting_group
     *
     * @param string|null $customer_posting_group customer_posting_group
     *
     * @return self
     */
    public function setCustomerPostingGroup($customer_posting_group)
    {
        if (is_null($customer_posting_group)) {
            throw new \InvalidArgumentException('non-nullable customer_posting_group cannot be null');
        }
        $this->container['customer_posting_group'] = $customer_posting_group;

        return $this;
    }

    /**
     * Gets ic_partner_code
     *
     * @return string|null
     */
    public function getIcPartnerCode()
    {
        return $this->container['ic_partner_code'];
    }

    /**
     * Sets ic_partner_code
     *
     * @param string|null $ic_partner_code ic_partner_code
     *
     * @return self
     */
    public function setIcPartnerCode($ic_partner_code)
    {
        if (is_null($ic_partner_code)) {
            throw new \InvalidArgumentException('non-nullable ic_partner_code cannot be null');
        }
        $this->container['ic_partner_code'] = $ic_partner_code;

        return $this;
    }

    /**
     * Gets salesperson_code
     *
     * @return string|null
     */
    public function getSalespersonCode()
    {
        return $this->container['salesperson_code'];
    }

    /**
     * Sets salesperson_code
     *
     * @param string|null $salesperson_code salesperson_code
     *
     * @return self
     */
    public function setSalespersonCode($salesperson_code)
    {
        if (is_null($salesperson_code)) {
            throw new \InvalidArgumentException('non-nullable salesperson_code cannot be null');
        }
        $this->container['salesperson_code'] = $salesperson_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return float|null
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param float|null $original_amount original_amount
     *
     * @return self
     */
    public function setOriginalAmount($original_amount)
    {
        if (is_null($original_amount)) {
            throw new \InvalidArgumentException('non-nullable original_amount cannot be null');
        }
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets original_amt_lcy
     *
     * @return float|null
     */
    public function getOriginalAmtLcy()
    {
        return $this->container['original_amt_lcy'];
    }

    /**
     * Sets original_amt_lcy
     *
     * @param float|null $original_amt_lcy original_amt_lcy
     *
     * @return self
     */
    public function setOriginalAmtLcy($original_amt_lcy)
    {
        if (is_null($original_amt_lcy)) {
            throw new \InvalidArgumentException('non-nullable original_amt_lcy cannot be null');
        }
        $this->container['original_amt_lcy'] = $original_amt_lcy;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_lcy
     *
     * @return float|null
     */
    public function getAmountLcy()
    {
        return $this->container['amount_lcy'];
    }

    /**
     * Sets amount_lcy
     *
     * @param float|null $amount_lcy amount_lcy
     *
     * @return self
     */
    public function setAmountLcy($amount_lcy)
    {
        if (is_null($amount_lcy)) {
            throw new \InvalidArgumentException('non-nullable amount_lcy cannot be null');
        }
        $this->container['amount_lcy'] = $amount_lcy;

        return $this;
    }

    /**
     * Gets debit_amount
     *
     * @return float|null
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     *
     * @param float|null $debit_amount debit_amount
     *
     * @return self
     */
    public function setDebitAmount($debit_amount)
    {
        if (is_null($debit_amount)) {
            throw new \InvalidArgumentException('non-nullable debit_amount cannot be null');
        }
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets debit_amount_lcy
     *
     * @return float|null
     */
    public function getDebitAmountLcy()
    {
        return $this->container['debit_amount_lcy'];
    }

    /**
     * Sets debit_amount_lcy
     *
     * @param float|null $debit_amount_lcy debit_amount_lcy
     *
     * @return self
     */
    public function setDebitAmountLcy($debit_amount_lcy)
    {
        if (is_null($debit_amount_lcy)) {
            throw new \InvalidArgumentException('non-nullable debit_amount_lcy cannot be null');
        }
        $this->container['debit_amount_lcy'] = $debit_amount_lcy;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return float|null
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param float|null $credit_amount credit_amount
     *
     * @return self
     */
    public function setCreditAmount($credit_amount)
    {
        if (is_null($credit_amount)) {
            throw new \InvalidArgumentException('non-nullable credit_amount cannot be null');
        }
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets credit_amount_lcy
     *
     * @return float|null
     */
    public function getCreditAmountLcy()
    {
        return $this->container['credit_amount_lcy'];
    }

    /**
     * Sets credit_amount_lcy
     *
     * @param float|null $credit_amount_lcy credit_amount_lcy
     *
     * @return self
     */
    public function setCreditAmountLcy($credit_amount_lcy)
    {
        if (is_null($credit_amount_lcy)) {
            throw new \InvalidArgumentException('non-nullable credit_amount_lcy cannot be null');
        }
        $this->container['credit_amount_lcy'] = $credit_amount_lcy;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return float|null
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param float|null $remaining_amount remaining_amount
     *
     * @return self
     */
    public function setRemainingAmount($remaining_amount)
    {
        if (is_null($remaining_amount)) {
            throw new \InvalidArgumentException('non-nullable remaining_amount cannot be null');
        }
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets remaining_amt_lcy
     *
     * @return float|null
     */
    public function getRemainingAmtLcy()
    {
        return $this->container['remaining_amt_lcy'];
    }

    /**
     * Sets remaining_amt_lcy
     *
     * @param float|null $remaining_amt_lcy remaining_amt_lcy
     *
     * @return self
     */
    public function setRemainingAmtLcy($remaining_amt_lcy)
    {
        if (is_null($remaining_amt_lcy)) {
            throw new \InvalidArgumentException('non-nullable remaining_amt_lcy cannot be null');
        }
        $this->container['remaining_amt_lcy'] = $remaining_amt_lcy;

        return $this;
    }

    /**
     * Gets sales_lcy
     *
     * @return float|null
     */
    public function getSalesLcy()
    {
        return $this->container['sales_lcy'];
    }

    /**
     * Sets sales_lcy
     *
     * @param float|null $sales_lcy sales_lcy
     *
     * @return self
     */
    public function setSalesLcy($sales_lcy)
    {
        if (is_null($sales_lcy)) {
            throw new \InvalidArgumentException('non-nullable sales_lcy cannot be null');
        }
        $this->container['sales_lcy'] = $sales_lcy;

        return $this;
    }

    /**
     * Gets bal_account_type
     *
     * @return string|null
     */
    public function getBalAccountType()
    {
        return $this->container['bal_account_type'];
    }

    /**
     * Sets bal_account_type
     *
     * @param string|null $bal_account_type bal_account_type
     *
     * @return self
     */
    public function setBalAccountType($bal_account_type)
    {
        if (is_null($bal_account_type)) {
            throw new \InvalidArgumentException('non-nullable bal_account_type cannot be null');
        }
        $allowedValues = $this->getBalAccountTypeAllowableValues();
        if (!in_array($bal_account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bal_account_type', must be one of '%s'",
                    $bal_account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bal_account_type'] = $bal_account_type;

        return $this;
    }

    /**
     * Gets bal_account_no
     *
     * @return string|null
     */
    public function getBalAccountNo()
    {
        return $this->container['bal_account_no'];
    }

    /**
     * Sets bal_account_no
     *
     * @param string|null $bal_account_no bal_account_no
     *
     * @return self
     */
    public function setBalAccountNo($bal_account_no)
    {
        if (is_null($bal_account_no)) {
            throw new \InvalidArgumentException('non-nullable bal_account_no cannot be null');
        }
        $this->container['bal_account_no'] = $bal_account_no;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets payment_prediction
     *
     * @return string|null
     */
    public function getPaymentPrediction()
    {
        return $this->container['payment_prediction'];
    }

    /**
     * Sets payment_prediction
     *
     * @param string|null $payment_prediction payment_prediction
     *
     * @return self
     */
    public function setPaymentPrediction($payment_prediction)
    {
        if (is_null($payment_prediction)) {
            throw new \InvalidArgumentException('non-nullable payment_prediction cannot be null');
        }
        $allowedValues = $this->getPaymentPredictionAllowableValues();
        if (!in_array($payment_prediction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_prediction', must be one of '%s'",
                    $payment_prediction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_prediction'] = $payment_prediction;

        return $this;
    }

    /**
     * Gets prediction_confidence
     *
     * @return string|null
     */
    public function getPredictionConfidence()
    {
        return $this->container['prediction_confidence'];
    }

    /**
     * Sets prediction_confidence
     *
     * @param string|null $prediction_confidence prediction_confidence
     *
     * @return self
     */
    public function setPredictionConfidence($prediction_confidence)
    {
        if (is_null($prediction_confidence)) {
            throw new \InvalidArgumentException('non-nullable prediction_confidence cannot be null');
        }
        $allowedValues = $this->getPredictionConfidenceAllowableValues();
        if (!in_array($prediction_confidence, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'prediction_confidence', must be one of '%s'",
                    $prediction_confidence,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prediction_confidence'] = $prediction_confidence;

        return $this;
    }

    /**
     * Gets prediction_confidence_percent
     *
     * @return float|null
     */
    public function getPredictionConfidencePercent()
    {
        return $this->container['prediction_confidence_percent'];
    }

    /**
     * Sets prediction_confidence_percent
     *
     * @param float|null $prediction_confidence_percent prediction_confidence_percent
     *
     * @return self
     */
    public function setPredictionConfidencePercent($prediction_confidence_percent)
    {
        if (is_null($prediction_confidence_percent)) {
            throw new \InvalidArgumentException('non-nullable prediction_confidence_percent cannot be null');
        }
        $this->container['prediction_confidence_percent'] = $prediction_confidence_percent;

        return $this;
    }

    /**
     * Gets pmt_discount_date
     *
     * @return string|null
     */
    public function getPmtDiscountDate()
    {
        return $this->container['pmt_discount_date'];
    }

    /**
     * Sets pmt_discount_date
     *
     * @param string|null $pmt_discount_date pmt_discount_date
     *
     * @return self
     */
    public function setPmtDiscountDate($pmt_discount_date)
    {
        if (is_null($pmt_discount_date)) {
            throw new \InvalidArgumentException('non-nullable pmt_discount_date cannot be null');
        }
        $this->container['pmt_discount_date'] = $pmt_discount_date;

        return $this;
    }

    /**
     * Gets pmt_disc_tolerance_date
     *
     * @return string|null
     */
    public function getPmtDiscToleranceDate()
    {
        return $this->container['pmt_disc_tolerance_date'];
    }

    /**
     * Sets pmt_disc_tolerance_date
     *
     * @param string|null $pmt_disc_tolerance_date pmt_disc_tolerance_date
     *
     * @return self
     */
    public function setPmtDiscToleranceDate($pmt_disc_tolerance_date)
    {
        if (is_null($pmt_disc_tolerance_date)) {
            throw new \InvalidArgumentException('non-nullable pmt_disc_tolerance_date cannot be null');
        }
        $this->container['pmt_disc_tolerance_date'] = $pmt_disc_tolerance_date;

        return $this;
    }

    /**
     * Gets original_pmt_disc_possible
     *
     * @return float|null
     */
    public function getOriginalPmtDiscPossible()
    {
        return $this->container['original_pmt_disc_possible'];
    }

    /**
     * Sets original_pmt_disc_possible
     *
     * @param float|null $original_pmt_disc_possible original_pmt_disc_possible
     *
     * @return self
     */
    public function setOriginalPmtDiscPossible($original_pmt_disc_possible)
    {
        if (is_null($original_pmt_disc_possible)) {
            throw new \InvalidArgumentException('non-nullable original_pmt_disc_possible cannot be null');
        }
        $this->container['original_pmt_disc_possible'] = $original_pmt_disc_possible;

        return $this;
    }

    /**
     * Gets remaining_pmt_disc_possible
     *
     * @return float|null
     */
    public function getRemainingPmtDiscPossible()
    {
        return $this->container['remaining_pmt_disc_possible'];
    }

    /**
     * Sets remaining_pmt_disc_possible
     *
     * @param float|null $remaining_pmt_disc_possible remaining_pmt_disc_possible
     *
     * @return self
     */
    public function setRemainingPmtDiscPossible($remaining_pmt_disc_possible)
    {
        if (is_null($remaining_pmt_disc_possible)) {
            throw new \InvalidArgumentException('non-nullable remaining_pmt_disc_possible cannot be null');
        }
        $this->container['remaining_pmt_disc_possible'] = $remaining_pmt_disc_possible;

        return $this;
    }

    /**
     * Gets max_payment_tolerance
     *
     * @return float|null
     */
    public function getMaxPaymentTolerance()
    {
        return $this->container['max_payment_tolerance'];
    }

    /**
     * Sets max_payment_tolerance
     *
     * @param float|null $max_payment_tolerance max_payment_tolerance
     *
     * @return self
     */
    public function setMaxPaymentTolerance($max_payment_tolerance)
    {
        if (is_null($max_payment_tolerance)) {
            throw new \InvalidArgumentException('non-nullable max_payment_tolerance cannot be null');
        }
        $this->container['max_payment_tolerance'] = $max_payment_tolerance;

        return $this;
    }

    /**
     * Gets payment_method_code
     *
     * @return string|null
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     *
     * @param string|null $payment_method_code payment_method_code
     *
     * @return self
     */
    public function setPaymentMethodCode($payment_method_code)
    {
        if (is_null($payment_method_code)) {
            throw new \InvalidArgumentException('non-nullable payment_method_code cannot be null');
        }
        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets open
     *
     * @return bool|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param bool|null $open open
     *
     * @return self
     */
    public function setOpen($open)
    {
        if (is_null($open)) {
            throw new \InvalidArgumentException('non-nullable open cannot be null');
        }
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return string|null
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param string|null $on_hold on_hold
     *
     * @return self
     */
    public function setOnHold($on_hold)
    {
        if (is_null($on_hold)) {
            throw new \InvalidArgumentException('non-nullable on_hold cannot be null');
        }
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string|null
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string|null $source_code source_code
     *
     * @return self
     */
    public function setSourceCode($source_code)
    {
        if (is_null($source_code)) {
            throw new \InvalidArgumentException('non-nullable source_code cannot be null');
        }
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code reason_code
     *
     * @return self
     */
    public function setReasonCode($reason_code)
    {
        if (is_null($reason_code)) {
            throw new \InvalidArgumentException('non-nullable reason_code cannot be null');
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets reversed
     *
     * @return bool|null
     */
    public function getReversed()
    {
        return $this->container['reversed'];
    }

    /**
     * Sets reversed
     *
     * @param bool|null $reversed reversed
     *
     * @return self
     */
    public function setReversed($reversed)
    {
        if (is_null($reversed)) {
            throw new \InvalidArgumentException('non-nullable reversed cannot be null');
        }
        $this->container['reversed'] = $reversed;

        return $this;
    }

    /**
     * Gets reversed_by_entry_no
     *
     * @return int|null
     */
    public function getReversedByEntryNo()
    {
        return $this->container['reversed_by_entry_no'];
    }

    /**
     * Sets reversed_by_entry_no
     *
     * @param int|null $reversed_by_entry_no reversed_by_entry_no
     *
     * @return self
     */
    public function setReversedByEntryNo($reversed_by_entry_no)
    {
        if (is_null($reversed_by_entry_no)) {
            throw new \InvalidArgumentException('non-nullable reversed_by_entry_no cannot be null');
        }
        $this->container['reversed_by_entry_no'] = $reversed_by_entry_no;

        return $this;
    }

    /**
     * Gets reversed_entry_no
     *
     * @return int|null
     */
    public function getReversedEntryNo()
    {
        return $this->container['reversed_entry_no'];
    }

    /**
     * Sets reversed_entry_no
     *
     * @param int|null $reversed_entry_no reversed_entry_no
     *
     * @return self
     */
    public function setReversedEntryNo($reversed_entry_no)
    {
        if (is_null($reversed_entry_no)) {
            throw new \InvalidArgumentException('non-nullable reversed_entry_no cannot be null');
        }
        $this->container['reversed_entry_no'] = $reversed_entry_no;

        return $this;
    }

    /**
     * Gets exported_to_payment_file
     *
     * @return bool|null
     */
    public function getExportedToPaymentFile()
    {
        return $this->container['exported_to_payment_file'];
    }

    /**
     * Sets exported_to_payment_file
     *
     * @param bool|null $exported_to_payment_file exported_to_payment_file
     *
     * @return self
     */
    public function setExportedToPaymentFile($exported_to_payment_file)
    {
        if (is_null($exported_to_payment_file)) {
            throw new \InvalidArgumentException('non-nullable exported_to_payment_file cannot be null');
        }
        $this->container['exported_to_payment_file'] = $exported_to_payment_file;

        return $this;
    }

    /**
     * Gets message_to_recipient
     *
     * @return string|null
     */
    public function getMessageToRecipient()
    {
        return $this->container['message_to_recipient'];
    }

    /**
     * Sets message_to_recipient
     *
     * @param string|null $message_to_recipient message_to_recipient
     *
     * @return self
     */
    public function setMessageToRecipient($message_to_recipient)
    {
        if (is_null($message_to_recipient)) {
            throw new \InvalidArgumentException('non-nullable message_to_recipient cannot be null');
        }
        $this->container['message_to_recipient'] = $message_to_recipient;

        return $this;
    }

    /**
     * Gets direct_debit_mandate_id
     *
     * @return string|null
     */
    public function getDirectDebitMandateId()
    {
        return $this->container['direct_debit_mandate_id'];
    }

    /**
     * Sets direct_debit_mandate_id
     *
     * @param string|null $direct_debit_mandate_id direct_debit_mandate_id
     *
     * @return self
     */
    public function setDirectDebitMandateId($direct_debit_mandate_id)
    {
        if (is_null($direct_debit_mandate_id)) {
            throw new \InvalidArgumentException('non-nullable direct_debit_mandate_id cannot be null');
        }
        $this->container['direct_debit_mandate_id'] = $direct_debit_mandate_id;

        return $this;
    }

    /**
     * Gets dimension_set_id
     *
     * @return int|null
     */
    public function getDimensionSetId()
    {
        return $this->container['dimension_set_id'];
    }

    /**
     * Sets dimension_set_id
     *
     * @param int|null $dimension_set_id dimension_set_id
     *
     * @return self
     */
    public function setDimensionSetId($dimension_set_id)
    {
        if (is_null($dimension_set_id)) {
            throw new \InvalidArgumentException('non-nullable dimension_set_id cannot be null');
        }
        $this->container['dimension_set_id'] = $dimension_set_id;

        return $this;
    }

    /**
     * Gets external_document_no
     *
     * @return string|null
     */
    public function getExternalDocumentNo()
    {
        return $this->container['external_document_no'];
    }

    /**
     * Sets external_document_no
     *
     * @param string|null $external_document_no external_document_no
     *
     * @return self
     */
    public function setExternalDocumentNo($external_document_no)
    {
        if (is_null($external_document_no)) {
            throw new \InvalidArgumentException('non-nullable external_document_no cannot be null');
        }
        $this->container['external_document_no'] = $external_document_no;

        return $this;
    }

    /**
     * Gets recipient_bank_account
     *
     * @return string|null
     */
    public function getRecipientBankAccount()
    {
        return $this->container['recipient_bank_account'];
    }

    /**
     * Sets recipient_bank_account
     *
     * @param string|null $recipient_bank_account recipient_bank_account
     *
     * @return self
     */
    public function setRecipientBankAccount($recipient_bank_account)
    {
        if (is_null($recipient_bank_account)) {
            throw new \InvalidArgumentException('non-nullable recipient_bank_account cannot be null');
        }
        $this->container['recipient_bank_account'] = $recipient_bank_account;

        return $this;
    }

    /**
     * Gets shortcut_dimension_3_code
     *
     * @return string|null
     */
    public function getShortcutDimension3Code()
    {
        return $this->container['shortcut_dimension_3_code'];
    }

    /**
     * Sets shortcut_dimension_3_code
     *
     * @param string|null $shortcut_dimension_3_code shortcut_dimension_3_code
     *
     * @return self
     */
    public function setShortcutDimension3Code($shortcut_dimension_3_code)
    {
        if (is_null($shortcut_dimension_3_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_3_code cannot be null');
        }
        $this->container['shortcut_dimension_3_code'] = $shortcut_dimension_3_code;

        return $this;
    }

    /**
     * Gets shortcut_dimension_4_code
     *
     * @return string|null
     */
    public function getShortcutDimension4Code()
    {
        return $this->container['shortcut_dimension_4_code'];
    }

    /**
     * Sets shortcut_dimension_4_code
     *
     * @param string|null $shortcut_dimension_4_code shortcut_dimension_4_code
     *
     * @return self
     */
    public function setShortcutDimension4Code($shortcut_dimension_4_code)
    {
        if (is_null($shortcut_dimension_4_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_4_code cannot be null');
        }
        $this->container['shortcut_dimension_4_code'] = $shortcut_dimension_4_code;

        return $this;
    }

    /**
     * Gets shortcut_dimension_5_code
     *
     * @return string|null
     */
    public function getShortcutDimension5Code()
    {
        return $this->container['shortcut_dimension_5_code'];
    }

    /**
     * Sets shortcut_dimension_5_code
     *
     * @param string|null $shortcut_dimension_5_code shortcut_dimension_5_code
     *
     * @return self
     */
    public function setShortcutDimension5Code($shortcut_dimension_5_code)
    {
        if (is_null($shortcut_dimension_5_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_5_code cannot be null');
        }
        $this->container['shortcut_dimension_5_code'] = $shortcut_dimension_5_code;

        return $this;
    }

    /**
     * Gets shortcut_dimension_6_code
     *
     * @return string|null
     */
    public function getShortcutDimension6Code()
    {
        return $this->container['shortcut_dimension_6_code'];
    }

    /**
     * Sets shortcut_dimension_6_code
     *
     * @param string|null $shortcut_dimension_6_code shortcut_dimension_6_code
     *
     * @return self
     */
    public function setShortcutDimension6Code($shortcut_dimension_6_code)
    {
        if (is_null($shortcut_dimension_6_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_6_code cannot be null');
        }
        $this->container['shortcut_dimension_6_code'] = $shortcut_dimension_6_code;

        return $this;
    }

    /**
     * Gets shortcut_dimension_7_code
     *
     * @return string|null
     */
    public function getShortcutDimension7Code()
    {
        return $this->container['shortcut_dimension_7_code'];
    }

    /**
     * Sets shortcut_dimension_7_code
     *
     * @param string|null $shortcut_dimension_7_code shortcut_dimension_7_code
     *
     * @return self
     */
    public function setShortcutDimension7Code($shortcut_dimension_7_code)
    {
        if (is_null($shortcut_dimension_7_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_7_code cannot be null');
        }
        $this->container['shortcut_dimension_7_code'] = $shortcut_dimension_7_code;

        return $this;
    }

    /**
     * Gets shortcut_dimension_8_code
     *
     * @return string|null
     */
    public function getShortcutDimension8Code()
    {
        return $this->container['shortcut_dimension_8_code'];
    }

    /**
     * Sets shortcut_dimension_8_code
     *
     * @param string|null $shortcut_dimension_8_code shortcut_dimension_8_code
     *
     * @return self
     */
    public function setShortcutDimension8Code($shortcut_dimension_8_code)
    {
        if (is_null($shortcut_dimension_8_code)) {
            throw new \InvalidArgumentException('non-nullable shortcut_dimension_8_code cannot be null');
        }
        $this->container['shortcut_dimension_8_code'] = $shortcut_dimension_8_code;

        return $this;
    }

    /**
     * Gets date_filter
     *
     * @return string|null
     */
    public function getDateFilter()
    {
        return $this->container['date_filter'];
    }

    /**
     * Sets date_filter
     *
     * @param string|null $date_filter date_filter
     *
     * @return self
     */
    public function setDateFilter($date_filter)
    {
        if (is_null($date_filter)) {
            throw new \InvalidArgumentException('non-nullable date_filter cannot be null');
        }
        $this->container['date_filter'] = $date_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


