<?php
/**
 * SpyLedgerAccountAllOf
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Microsoft Business Center API
 *
 * The Microsoft Business Center API is a RESTful API that provides an interface to the Microsoft Business Center service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\MsbcRestClient\Model;

use \ArrayAccess;
use \Spy\MsbcRestClient\ObjectSerializer;

/**
 * SpyLedgerAccountAllOf Class Doc Comment
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpyLedgerAccountAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SpyLedgerAccountAllOfModelFields
      */
    public static function GetModelFields(): SpyLedgerAccountAllOfModelFields
    {
        return new SpyLedgerAccountAllOfModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SpyLedgerAccountAllOfModelAttributes
      */
    public static function GetModelAttributes(): SpyLedgerAccountAllOfModelAttributes
    {
        return new SpyLedgerAccountAllOfModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpyLedgerAccount_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'no' => 'string',
        'name' => 'string',
        'net_change' => 'float',
        'balance' => 'float',
        'income_balance' => 'string',
        'account_category' => 'string',
        'account_subcategory_descript' => 'string',
        'account_type' => 'string',
        'direct_posting' => 'bool',
        'totaling' => 'string',
        'gen_posting_type' => 'string',
        'gen_bus_posting_group' => 'string',
        'gen_prod_posting_group' => 'string',
        'vat_bus_posting_group' => 'string',
        'vat_prod_posting_group' => 'string',
        'debit_amount' => 'float',
        'credit_amount' => 'float',
        'balance_at_date' => 'float',
        'additional_currency_net_change' => 'float',
        'add_currency_balance_at_date' => 'float',
        'additional_currency_balance' => 'float',
        'consol_debit_acc' => 'string',
        'consol_credit_acc' => 'string',
        'cost_type_no' => 'string',
        'consol_translation_method' => 'string',
        'default_ic_partner_g_l_acc_no' => 'string',
        'default_deferral_template_code' => 'string',
        'no_2' => 'string',
        'business_unit_filter' => 'string',
        'global_dimension_1_filter' => 'string',
        'global_dimension_2_filter' => 'string',
        'date_filter' => 'string',
        'dimension_set_id_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'no' => null,
        'name' => null,
        'net_change' => null,
        'balance' => null,
        'income_balance' => null,
        'account_category' => null,
        'account_subcategory_descript' => null,
        'account_type' => null,
        'direct_posting' => null,
        'totaling' => null,
        'gen_posting_type' => null,
        'gen_bus_posting_group' => null,
        'gen_prod_posting_group' => null,
        'vat_bus_posting_group' => null,
        'vat_prod_posting_group' => null,
        'debit_amount' => null,
        'credit_amount' => null,
        'balance_at_date' => null,
        'additional_currency_net_change' => null,
        'add_currency_balance_at_date' => null,
        'additional_currency_balance' => null,
        'consol_debit_acc' => null,
        'consol_credit_acc' => null,
        'cost_type_no' => null,
        'consol_translation_method' => null,
        'default_ic_partner_g_l_acc_no' => null,
        'default_deferral_template_code' => null,
        'no_2' => null,
        'business_unit_filter' => null,
        'global_dimension_1_filter' => null,
        'global_dimension_2_filter' => null,
        'date_filter' => null,
        'dimension_set_id_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'no' => false,
		'name' => false,
		'net_change' => false,
		'balance' => false,
		'income_balance' => false,
		'account_category' => false,
		'account_subcategory_descript' => false,
		'account_type' => false,
		'direct_posting' => false,
		'totaling' => false,
		'gen_posting_type' => false,
		'gen_bus_posting_group' => false,
		'gen_prod_posting_group' => false,
		'vat_bus_posting_group' => false,
		'vat_prod_posting_group' => false,
		'debit_amount' => false,
		'credit_amount' => false,
		'balance_at_date' => false,
		'additional_currency_net_change' => false,
		'add_currency_balance_at_date' => false,
		'additional_currency_balance' => false,
		'consol_debit_acc' => false,
		'consol_credit_acc' => false,
		'cost_type_no' => false,
		'consol_translation_method' => false,
		'default_ic_partner_g_l_acc_no' => false,
		'default_deferral_template_code' => false,
		'no_2' => false,
		'business_unit_filter' => false,
		'global_dimension_1_filter' => false,
		'global_dimension_2_filter' => false,
		'date_filter' => false,
		'dimension_set_id_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no' => 'No',
        'name' => 'Name',
        'net_change' => 'Net_Change',
        'balance' => 'Balance',
        'income_balance' => 'Income_Balance',
        'account_category' => 'Account_Category',
        'account_subcategory_descript' => 'Account_Subcategory_Descript',
        'account_type' => 'Account_Type',
        'direct_posting' => 'Direct_Posting',
        'totaling' => 'Totaling',
        'gen_posting_type' => 'Gen_Posting_Type',
        'gen_bus_posting_group' => 'Gen_Bus_Posting_Group',
        'gen_prod_posting_group' => 'Gen_Prod_Posting_Group',
        'vat_bus_posting_group' => 'VAT_Bus_Posting_Group',
        'vat_prod_posting_group' => 'VAT_Prod_Posting_Group',
        'debit_amount' => 'Debit_Amount',
        'credit_amount' => 'Credit_Amount',
        'balance_at_date' => 'Balance_at_Date',
        'additional_currency_net_change' => 'Additional_Currency_Net_Change',
        'add_currency_balance_at_date' => 'Add_Currency_Balance_at_Date',
        'additional_currency_balance' => 'Additional_Currency_Balance',
        'consol_debit_acc' => 'Consol_Debit_Acc',
        'consol_credit_acc' => 'Consol_Credit_Acc',
        'cost_type_no' => 'Cost_Type_No',
        'consol_translation_method' => 'Consol_Translation_Method',
        'default_ic_partner_g_l_acc_no' => 'Default_IC_Partner_G_L_Acc_No',
        'default_deferral_template_code' => 'Default_Deferral_Template_Code',
        'no_2' => 'No_2',
        'business_unit_filter' => 'Business_Unit_Filter',
        'global_dimension_1_filter' => 'Global_Dimension_1_Filter',
        'global_dimension_2_filter' => 'Global_Dimension_2_Filter',
        'date_filter' => 'Date_Filter',
        'dimension_set_id_filter' => 'Dimension_Set_ID_Filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no' => 'setNo',
        'name' => 'setName',
        'net_change' => 'setNetChange',
        'balance' => 'setBalance',
        'income_balance' => 'setIncomeBalance',
        'account_category' => 'setAccountCategory',
        'account_subcategory_descript' => 'setAccountSubcategoryDescript',
        'account_type' => 'setAccountType',
        'direct_posting' => 'setDirectPosting',
        'totaling' => 'setTotaling',
        'gen_posting_type' => 'setGenPostingType',
        'gen_bus_posting_group' => 'setGenBusPostingGroup',
        'gen_prod_posting_group' => 'setGenProdPostingGroup',
        'vat_bus_posting_group' => 'setVatBusPostingGroup',
        'vat_prod_posting_group' => 'setVatProdPostingGroup',
        'debit_amount' => 'setDebitAmount',
        'credit_amount' => 'setCreditAmount',
        'balance_at_date' => 'setBalanceAtDate',
        'additional_currency_net_change' => 'setAdditionalCurrencyNetChange',
        'add_currency_balance_at_date' => 'setAddCurrencyBalanceAtDate',
        'additional_currency_balance' => 'setAdditionalCurrencyBalance',
        'consol_debit_acc' => 'setConsolDebitAcc',
        'consol_credit_acc' => 'setConsolCreditAcc',
        'cost_type_no' => 'setCostTypeNo',
        'consol_translation_method' => 'setConsolTranslationMethod',
        'default_ic_partner_g_l_acc_no' => 'setDefaultIcPartnerGLAccNo',
        'default_deferral_template_code' => 'setDefaultDeferralTemplateCode',
        'no_2' => 'setNo2',
        'business_unit_filter' => 'setBusinessUnitFilter',
        'global_dimension_1_filter' => 'setGlobalDimension1Filter',
        'global_dimension_2_filter' => 'setGlobalDimension2Filter',
        'date_filter' => 'setDateFilter',
        'dimension_set_id_filter' => 'setDimensionSetIdFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no' => 'getNo',
        'name' => 'getName',
        'net_change' => 'getNetChange',
        'balance' => 'getBalance',
        'income_balance' => 'getIncomeBalance',
        'account_category' => 'getAccountCategory',
        'account_subcategory_descript' => 'getAccountSubcategoryDescript',
        'account_type' => 'getAccountType',
        'direct_posting' => 'getDirectPosting',
        'totaling' => 'getTotaling',
        'gen_posting_type' => 'getGenPostingType',
        'gen_bus_posting_group' => 'getGenBusPostingGroup',
        'gen_prod_posting_group' => 'getGenProdPostingGroup',
        'vat_bus_posting_group' => 'getVatBusPostingGroup',
        'vat_prod_posting_group' => 'getVatProdPostingGroup',
        'debit_amount' => 'getDebitAmount',
        'credit_amount' => 'getCreditAmount',
        'balance_at_date' => 'getBalanceAtDate',
        'additional_currency_net_change' => 'getAdditionalCurrencyNetChange',
        'add_currency_balance_at_date' => 'getAddCurrencyBalanceAtDate',
        'additional_currency_balance' => 'getAdditionalCurrencyBalance',
        'consol_debit_acc' => 'getConsolDebitAcc',
        'consol_credit_acc' => 'getConsolCreditAcc',
        'cost_type_no' => 'getCostTypeNo',
        'consol_translation_method' => 'getConsolTranslationMethod',
        'default_ic_partner_g_l_acc_no' => 'getDefaultIcPartnerGLAccNo',
        'default_deferral_template_code' => 'getDefaultDeferralTemplateCode',
        'no_2' => 'getNo2',
        'business_unit_filter' => 'getBusinessUnitFilter',
        'global_dimension_1_filter' => 'getGlobalDimension1Filter',
        'global_dimension_2_filter' => 'getGlobalDimension2Filter',
        'date_filter' => 'getDateFilter',
        'dimension_set_id_filter' => 'getDimensionSetIdFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INCOME_BALANCE_INCOME_STATEMENT = 'Income Statement';
    public const INCOME_BALANCE_BALANCE_SHEET = 'Balance Sheet';
    public const ACCOUNT_CATEGORY_SPACE_1 = ' ';
    public const ACCOUNT_CATEGORY_ASSETS = 'Assets';
    public const ACCOUNT_CATEGORY_LIABILITIES = 'Liabilities';
    public const ACCOUNT_CATEGORY_EQUITY = 'Equity';
    public const ACCOUNT_CATEGORY_INCOME = 'Income';
    public const ACCOUNT_CATEGORY_COST_OF_GOODS_SOLD = 'Cost of Goods Sold';
    public const ACCOUNT_CATEGORY_EXPENSE = 'Expense';
    public const ACCOUNT_TYPE_POSTING = 'Posting';
    public const ACCOUNT_TYPE_HEADING = 'Heading';
    public const ACCOUNT_TYPE_TOTAL = 'Total';
    public const ACCOUNT_TYPE_BEGIN_TOTAL = 'Begin-Total';
    public const ACCOUNT_TYPE_END_TOTAL = 'End-Total';
    public const GEN_POSTING_TYPE_SPACE_1 = ' ';
    public const GEN_POSTING_TYPE_PURCHASE = 'Purchase';
    public const GEN_POSTING_TYPE_SALE = 'Sale';
    public const GEN_POSTING_TYPE_SETTLEMENT = 'Settlement';
    public const CONSOL_TRANSLATION_METHOD_AVERAGE_RATE__MANUAL = 'Average Rate (Manual)';
    public const CONSOL_TRANSLATION_METHOD_CLOSING_RATE = 'Closing Rate';
    public const CONSOL_TRANSLATION_METHOD_HISTORICAL_RATE = 'Historical Rate';
    public const CONSOL_TRANSLATION_METHOD_COMPOSITE_RATE = 'Composite Rate';
    public const CONSOL_TRANSLATION_METHOD_EQUITY_RATE = 'Equity Rate';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomeBalanceAllowableValues()
    {
        return [
            self::INCOME_BALANCE_INCOME_STATEMENT,
            self::INCOME_BALANCE_BALANCE_SHEET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountCategoryAllowableValues()
    {
        return [
            self::ACCOUNT_CATEGORY_SPACE_1,
            self::ACCOUNT_CATEGORY_ASSETS,
            self::ACCOUNT_CATEGORY_LIABILITIES,
            self::ACCOUNT_CATEGORY_EQUITY,
            self::ACCOUNT_CATEGORY_INCOME,
            self::ACCOUNT_CATEGORY_COST_OF_GOODS_SOLD,
            self::ACCOUNT_CATEGORY_EXPENSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_POSTING,
            self::ACCOUNT_TYPE_HEADING,
            self::ACCOUNT_TYPE_TOTAL,
            self::ACCOUNT_TYPE_BEGIN_TOTAL,
            self::ACCOUNT_TYPE_END_TOTAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenPostingTypeAllowableValues()
    {
        return [
            self::GEN_POSTING_TYPE_SPACE_1,
            self::GEN_POSTING_TYPE_PURCHASE,
            self::GEN_POSTING_TYPE_SALE,
            self::GEN_POSTING_TYPE_SETTLEMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsolTranslationMethodAllowableValues()
    {
        return [
            self::CONSOL_TRANSLATION_METHOD_AVERAGE_RATE__MANUAL,
            self::CONSOL_TRANSLATION_METHOD_CLOSING_RATE,
            self::CONSOL_TRANSLATION_METHOD_HISTORICAL_RATE,
            self::CONSOL_TRANSLATION_METHOD_COMPOSITE_RATE,
            self::CONSOL_TRANSLATION_METHOD_EQUITY_RATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('no', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('net_change', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('income_balance', $data ?? [], null);
        $this->setIfExists('account_category', $data ?? [], null);
        $this->setIfExists('account_subcategory_descript', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('direct_posting', $data ?? [], null);
        $this->setIfExists('totaling', $data ?? [], null);
        $this->setIfExists('gen_posting_type', $data ?? [], null);
        $this->setIfExists('gen_bus_posting_group', $data ?? [], null);
        $this->setIfExists('gen_prod_posting_group', $data ?? [], null);
        $this->setIfExists('vat_bus_posting_group', $data ?? [], null);
        $this->setIfExists('vat_prod_posting_group', $data ?? [], null);
        $this->setIfExists('debit_amount', $data ?? [], null);
        $this->setIfExists('credit_amount', $data ?? [], null);
        $this->setIfExists('balance_at_date', $data ?? [], null);
        $this->setIfExists('additional_currency_net_change', $data ?? [], null);
        $this->setIfExists('add_currency_balance_at_date', $data ?? [], null);
        $this->setIfExists('additional_currency_balance', $data ?? [], null);
        $this->setIfExists('consol_debit_acc', $data ?? [], null);
        $this->setIfExists('consol_credit_acc', $data ?? [], null);
        $this->setIfExists('cost_type_no', $data ?? [], null);
        $this->setIfExists('consol_translation_method', $data ?? [], null);
        $this->setIfExists('default_ic_partner_g_l_acc_no', $data ?? [], null);
        $this->setIfExists('default_deferral_template_code', $data ?? [], null);
        $this->setIfExists('no_2', $data ?? [], null);
        $this->setIfExists('business_unit_filter', $data ?? [], null);
        $this->setIfExists('global_dimension_1_filter', $data ?? [], null);
        $this->setIfExists('global_dimension_2_filter', $data ?? [], null);
        $this->setIfExists('date_filter', $data ?? [], null);
        $this->setIfExists('dimension_set_id_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIncomeBalanceAllowableValues();
        if (!is_null($this->container['income_balance']) && !in_array($this->container['income_balance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'income_balance', must be one of '%s'",
                $this->container['income_balance'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountCategoryAllowableValues();
        if (!is_null($this->container['account_category']) && !in_array($this->container['account_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_category', must be one of '%s'",
                $this->container['account_category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenPostingTypeAllowableValues();
        if (!is_null($this->container['gen_posting_type']) && !in_array($this->container['gen_posting_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gen_posting_type', must be one of '%s'",
                $this->container['gen_posting_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConsolTranslationMethodAllowableValues();
        if (!is_null($this->container['consol_translation_method']) && !in_array($this->container['consol_translation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'consol_translation_method', must be one of '%s'",
                $this->container['consol_translation_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no
     *
     * @return string|null
     */
    public function getNo()
    {
        return $this->container['no'];
    }

    /**
     * Sets no
     *
     * @param string|null $no no
     *
     * @return self
     */
    public function setNo($no)
    {
        if (is_null($no)) {
            throw new \InvalidArgumentException('non-nullable no cannot be null');
        }
        $this->container['no'] = $no;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets net_change
     *
     * @return float|null
     */
    public function getNetChange()
    {
        return $this->container['net_change'];
    }

    /**
     * Sets net_change
     *
     * @param float|null $net_change net_change
     *
     * @return self
     */
    public function setNetChange($net_change)
    {
        if (is_null($net_change)) {
            throw new \InvalidArgumentException('non-nullable net_change cannot be null');
        }
        $this->container['net_change'] = $net_change;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets income_balance
     *
     * @return string|null
     */
    public function getIncomeBalance()
    {
        return $this->container['income_balance'];
    }

    /**
     * Sets income_balance
     *
     * @param string|null $income_balance income_balance
     *
     * @return self
     */
    public function setIncomeBalance($income_balance)
    {
        if (is_null($income_balance)) {
            throw new \InvalidArgumentException('non-nullable income_balance cannot be null');
        }
        $allowedValues = $this->getIncomeBalanceAllowableValues();
        if (!in_array($income_balance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'income_balance', must be one of '%s'",
                    $income_balance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['income_balance'] = $income_balance;

        return $this;
    }

    /**
     * Gets account_category
     *
     * @return string|null
     */
    public function getAccountCategory()
    {
        return $this->container['account_category'];
    }

    /**
     * Sets account_category
     *
     * @param string|null $account_category account_category
     *
     * @return self
     */
    public function setAccountCategory($account_category)
    {
        if (is_null($account_category)) {
            throw new \InvalidArgumentException('non-nullable account_category cannot be null');
        }
        $allowedValues = $this->getAccountCategoryAllowableValues();
        if (!in_array($account_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_category', must be one of '%s'",
                    $account_category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_category'] = $account_category;

        return $this;
    }

    /**
     * Gets account_subcategory_descript
     *
     * @return string|null
     */
    public function getAccountSubcategoryDescript()
    {
        return $this->container['account_subcategory_descript'];
    }

    /**
     * Sets account_subcategory_descript
     *
     * @param string|null $account_subcategory_descript account_subcategory_descript
     *
     * @return self
     */
    public function setAccountSubcategoryDescript($account_subcategory_descript)
    {
        if (is_null($account_subcategory_descript)) {
            throw new \InvalidArgumentException('non-nullable account_subcategory_descript cannot be null');
        }
        $this->container['account_subcategory_descript'] = $account_subcategory_descript;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets direct_posting
     *
     * @return bool|null
     */
    public function getDirectPosting()
    {
        return $this->container['direct_posting'];
    }

    /**
     * Sets direct_posting
     *
     * @param bool|null $direct_posting direct_posting
     *
     * @return self
     */
    public function setDirectPosting($direct_posting)
    {
        if (is_null($direct_posting)) {
            throw new \InvalidArgumentException('non-nullable direct_posting cannot be null');
        }
        $this->container['direct_posting'] = $direct_posting;

        return $this;
    }

    /**
     * Gets totaling
     *
     * @return string|null
     */
    public function getTotaling()
    {
        return $this->container['totaling'];
    }

    /**
     * Sets totaling
     *
     * @param string|null $totaling totaling
     *
     * @return self
     */
    public function setTotaling($totaling)
    {
        if (is_null($totaling)) {
            throw new \InvalidArgumentException('non-nullable totaling cannot be null');
        }
        $this->container['totaling'] = $totaling;

        return $this;
    }

    /**
     * Gets gen_posting_type
     *
     * @return string|null
     */
    public function getGenPostingType()
    {
        return $this->container['gen_posting_type'];
    }

    /**
     * Sets gen_posting_type
     *
     * @param string|null $gen_posting_type gen_posting_type
     *
     * @return self
     */
    public function setGenPostingType($gen_posting_type)
    {
        if (is_null($gen_posting_type)) {
            throw new \InvalidArgumentException('non-nullable gen_posting_type cannot be null');
        }
        $allowedValues = $this->getGenPostingTypeAllowableValues();
        if (!in_array($gen_posting_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gen_posting_type', must be one of '%s'",
                    $gen_posting_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gen_posting_type'] = $gen_posting_type;

        return $this;
    }

    /**
     * Gets gen_bus_posting_group
     *
     * @return string|null
     */
    public function getGenBusPostingGroup()
    {
        return $this->container['gen_bus_posting_group'];
    }

    /**
     * Sets gen_bus_posting_group
     *
     * @param string|null $gen_bus_posting_group gen_bus_posting_group
     *
     * @return self
     */
    public function setGenBusPostingGroup($gen_bus_posting_group)
    {
        if (is_null($gen_bus_posting_group)) {
            throw new \InvalidArgumentException('non-nullable gen_bus_posting_group cannot be null');
        }
        $this->container['gen_bus_posting_group'] = $gen_bus_posting_group;

        return $this;
    }

    /**
     * Gets gen_prod_posting_group
     *
     * @return string|null
     */
    public function getGenProdPostingGroup()
    {
        return $this->container['gen_prod_posting_group'];
    }

    /**
     * Sets gen_prod_posting_group
     *
     * @param string|null $gen_prod_posting_group gen_prod_posting_group
     *
     * @return self
     */
    public function setGenProdPostingGroup($gen_prod_posting_group)
    {
        if (is_null($gen_prod_posting_group)) {
            throw new \InvalidArgumentException('non-nullable gen_prod_posting_group cannot be null');
        }
        $this->container['gen_prod_posting_group'] = $gen_prod_posting_group;

        return $this;
    }

    /**
     * Gets vat_bus_posting_group
     *
     * @return string|null
     */
    public function getVatBusPostingGroup()
    {
        return $this->container['vat_bus_posting_group'];
    }

    /**
     * Sets vat_bus_posting_group
     *
     * @param string|null $vat_bus_posting_group vat_bus_posting_group
     *
     * @return self
     */
    public function setVatBusPostingGroup($vat_bus_posting_group)
    {
        if (is_null($vat_bus_posting_group)) {
            throw new \InvalidArgumentException('non-nullable vat_bus_posting_group cannot be null');
        }
        $this->container['vat_bus_posting_group'] = $vat_bus_posting_group;

        return $this;
    }

    /**
     * Gets vat_prod_posting_group
     *
     * @return string|null
     */
    public function getVatProdPostingGroup()
    {
        return $this->container['vat_prod_posting_group'];
    }

    /**
     * Sets vat_prod_posting_group
     *
     * @param string|null $vat_prod_posting_group vat_prod_posting_group
     *
     * @return self
     */
    public function setVatProdPostingGroup($vat_prod_posting_group)
    {
        if (is_null($vat_prod_posting_group)) {
            throw new \InvalidArgumentException('non-nullable vat_prod_posting_group cannot be null');
        }
        $this->container['vat_prod_posting_group'] = $vat_prod_posting_group;

        return $this;
    }

    /**
     * Gets debit_amount
     *
     * @return float|null
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     *
     * @param float|null $debit_amount debit_amount
     *
     * @return self
     */
    public function setDebitAmount($debit_amount)
    {
        if (is_null($debit_amount)) {
            throw new \InvalidArgumentException('non-nullable debit_amount cannot be null');
        }
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return float|null
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param float|null $credit_amount credit_amount
     *
     * @return self
     */
    public function setCreditAmount($credit_amount)
    {
        if (is_null($credit_amount)) {
            throw new \InvalidArgumentException('non-nullable credit_amount cannot be null');
        }
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets balance_at_date
     *
     * @return float|null
     */
    public function getBalanceAtDate()
    {
        return $this->container['balance_at_date'];
    }

    /**
     * Sets balance_at_date
     *
     * @param float|null $balance_at_date balance_at_date
     *
     * @return self
     */
    public function setBalanceAtDate($balance_at_date)
    {
        if (is_null($balance_at_date)) {
            throw new \InvalidArgumentException('non-nullable balance_at_date cannot be null');
        }
        $this->container['balance_at_date'] = $balance_at_date;

        return $this;
    }

    /**
     * Gets additional_currency_net_change
     *
     * @return float|null
     */
    public function getAdditionalCurrencyNetChange()
    {
        return $this->container['additional_currency_net_change'];
    }

    /**
     * Sets additional_currency_net_change
     *
     * @param float|null $additional_currency_net_change additional_currency_net_change
     *
     * @return self
     */
    public function setAdditionalCurrencyNetChange($additional_currency_net_change)
    {
        if (is_null($additional_currency_net_change)) {
            throw new \InvalidArgumentException('non-nullable additional_currency_net_change cannot be null');
        }
        $this->container['additional_currency_net_change'] = $additional_currency_net_change;

        return $this;
    }

    /**
     * Gets add_currency_balance_at_date
     *
     * @return float|null
     */
    public function getAddCurrencyBalanceAtDate()
    {
        return $this->container['add_currency_balance_at_date'];
    }

    /**
     * Sets add_currency_balance_at_date
     *
     * @param float|null $add_currency_balance_at_date add_currency_balance_at_date
     *
     * @return self
     */
    public function setAddCurrencyBalanceAtDate($add_currency_balance_at_date)
    {
        if (is_null($add_currency_balance_at_date)) {
            throw new \InvalidArgumentException('non-nullable add_currency_balance_at_date cannot be null');
        }
        $this->container['add_currency_balance_at_date'] = $add_currency_balance_at_date;

        return $this;
    }

    /**
     * Gets additional_currency_balance
     *
     * @return float|null
     */
    public function getAdditionalCurrencyBalance()
    {
        return $this->container['additional_currency_balance'];
    }

    /**
     * Sets additional_currency_balance
     *
     * @param float|null $additional_currency_balance additional_currency_balance
     *
     * @return self
     */
    public function setAdditionalCurrencyBalance($additional_currency_balance)
    {
        if (is_null($additional_currency_balance)) {
            throw new \InvalidArgumentException('non-nullable additional_currency_balance cannot be null');
        }
        $this->container['additional_currency_balance'] = $additional_currency_balance;

        return $this;
    }

    /**
     * Gets consol_debit_acc
     *
     * @return string|null
     */
    public function getConsolDebitAcc()
    {
        return $this->container['consol_debit_acc'];
    }

    /**
     * Sets consol_debit_acc
     *
     * @param string|null $consol_debit_acc consol_debit_acc
     *
     * @return self
     */
    public function setConsolDebitAcc($consol_debit_acc)
    {
        if (is_null($consol_debit_acc)) {
            throw new \InvalidArgumentException('non-nullable consol_debit_acc cannot be null');
        }
        $this->container['consol_debit_acc'] = $consol_debit_acc;

        return $this;
    }

    /**
     * Gets consol_credit_acc
     *
     * @return string|null
     */
    public function getConsolCreditAcc()
    {
        return $this->container['consol_credit_acc'];
    }

    /**
     * Sets consol_credit_acc
     *
     * @param string|null $consol_credit_acc consol_credit_acc
     *
     * @return self
     */
    public function setConsolCreditAcc($consol_credit_acc)
    {
        if (is_null($consol_credit_acc)) {
            throw new \InvalidArgumentException('non-nullable consol_credit_acc cannot be null');
        }
        $this->container['consol_credit_acc'] = $consol_credit_acc;

        return $this;
    }

    /**
     * Gets cost_type_no
     *
     * @return string|null
     */
    public function getCostTypeNo()
    {
        return $this->container['cost_type_no'];
    }

    /**
     * Sets cost_type_no
     *
     * @param string|null $cost_type_no cost_type_no
     *
     * @return self
     */
    public function setCostTypeNo($cost_type_no)
    {
        if (is_null($cost_type_no)) {
            throw new \InvalidArgumentException('non-nullable cost_type_no cannot be null');
        }
        $this->container['cost_type_no'] = $cost_type_no;

        return $this;
    }

    /**
     * Gets consol_translation_method
     *
     * @return string|null
     */
    public function getConsolTranslationMethod()
    {
        return $this->container['consol_translation_method'];
    }

    /**
     * Sets consol_translation_method
     *
     * @param string|null $consol_translation_method consol_translation_method
     *
     * @return self
     */
    public function setConsolTranslationMethod($consol_translation_method)
    {
        if (is_null($consol_translation_method)) {
            throw new \InvalidArgumentException('non-nullable consol_translation_method cannot be null');
        }
        $allowedValues = $this->getConsolTranslationMethodAllowableValues();
        if (!in_array($consol_translation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'consol_translation_method', must be one of '%s'",
                    $consol_translation_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consol_translation_method'] = $consol_translation_method;

        return $this;
    }

    /**
     * Gets default_ic_partner_g_l_acc_no
     *
     * @return string|null
     */
    public function getDefaultIcPartnerGLAccNo()
    {
        return $this->container['default_ic_partner_g_l_acc_no'];
    }

    /**
     * Sets default_ic_partner_g_l_acc_no
     *
     * @param string|null $default_ic_partner_g_l_acc_no default_ic_partner_g_l_acc_no
     *
     * @return self
     */
    public function setDefaultIcPartnerGLAccNo($default_ic_partner_g_l_acc_no)
    {
        if (is_null($default_ic_partner_g_l_acc_no)) {
            throw new \InvalidArgumentException('non-nullable default_ic_partner_g_l_acc_no cannot be null');
        }
        $this->container['default_ic_partner_g_l_acc_no'] = $default_ic_partner_g_l_acc_no;

        return $this;
    }

    /**
     * Gets default_deferral_template_code
     *
     * @return string|null
     */
    public function getDefaultDeferralTemplateCode()
    {
        return $this->container['default_deferral_template_code'];
    }

    /**
     * Sets default_deferral_template_code
     *
     * @param string|null $default_deferral_template_code default_deferral_template_code
     *
     * @return self
     */
    public function setDefaultDeferralTemplateCode($default_deferral_template_code)
    {
        if (is_null($default_deferral_template_code)) {
            throw new \InvalidArgumentException('non-nullable default_deferral_template_code cannot be null');
        }
        $this->container['default_deferral_template_code'] = $default_deferral_template_code;

        return $this;
    }

    /**
     * Gets no_2
     *
     * @return string|null
     */
    public function getNo2()
    {
        return $this->container['no_2'];
    }

    /**
     * Sets no_2
     *
     * @param string|null $no_2 no_2
     *
     * @return self
     */
    public function setNo2($no_2)
    {
        if (is_null($no_2)) {
            throw new \InvalidArgumentException('non-nullable no_2 cannot be null');
        }
        $this->container['no_2'] = $no_2;

        return $this;
    }

    /**
     * Gets business_unit_filter
     *
     * @return string|null
     */
    public function getBusinessUnitFilter()
    {
        return $this->container['business_unit_filter'];
    }

    /**
     * Sets business_unit_filter
     *
     * @param string|null $business_unit_filter business_unit_filter
     *
     * @return self
     */
    public function setBusinessUnitFilter($business_unit_filter)
    {
        if (is_null($business_unit_filter)) {
            throw new \InvalidArgumentException('non-nullable business_unit_filter cannot be null');
        }
        $this->container['business_unit_filter'] = $business_unit_filter;

        return $this;
    }

    /**
     * Gets global_dimension_1_filter
     *
     * @return string|null
     */
    public function getGlobalDimension1Filter()
    {
        return $this->container['global_dimension_1_filter'];
    }

    /**
     * Sets global_dimension_1_filter
     *
     * @param string|null $global_dimension_1_filter global_dimension_1_filter
     *
     * @return self
     */
    public function setGlobalDimension1Filter($global_dimension_1_filter)
    {
        if (is_null($global_dimension_1_filter)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_1_filter cannot be null');
        }
        $this->container['global_dimension_1_filter'] = $global_dimension_1_filter;

        return $this;
    }

    /**
     * Gets global_dimension_2_filter
     *
     * @return string|null
     */
    public function getGlobalDimension2Filter()
    {
        return $this->container['global_dimension_2_filter'];
    }

    /**
     * Sets global_dimension_2_filter
     *
     * @param string|null $global_dimension_2_filter global_dimension_2_filter
     *
     * @return self
     */
    public function setGlobalDimension2Filter($global_dimension_2_filter)
    {
        if (is_null($global_dimension_2_filter)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_2_filter cannot be null');
        }
        $this->container['global_dimension_2_filter'] = $global_dimension_2_filter;

        return $this;
    }

    /**
     * Gets date_filter
     *
     * @return string|null
     */
    public function getDateFilter()
    {
        return $this->container['date_filter'];
    }

    /**
     * Sets date_filter
     *
     * @param string|null $date_filter date_filter
     *
     * @return self
     */
    public function setDateFilter($date_filter)
    {
        if (is_null($date_filter)) {
            throw new \InvalidArgumentException('non-nullable date_filter cannot be null');
        }
        $this->container['date_filter'] = $date_filter;

        return $this;
    }

    /**
     * Gets dimension_set_id_filter
     *
     * @return string|null
     */
    public function getDimensionSetIdFilter()
    {
        return $this->container['dimension_set_id_filter'];
    }

    /**
     * Sets dimension_set_id_filter
     *
     * @param string|null $dimension_set_id_filter dimension_set_id_filter
     *
     * @return self
     */
    public function setDimensionSetIdFilter($dimension_set_id_filter)
    {
        if (is_null($dimension_set_id_filter)) {
            throw new \InvalidArgumentException('non-nullable dimension_set_id_filter cannot be null');
        }
        $this->container['dimension_set_id_filter'] = $dimension_set_id_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


