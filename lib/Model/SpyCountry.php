<?php
/**
 * SpyCountry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Microsoft Business Center API
 *
 * The Microsoft Business Center API is a RESTful API that provides an interface to the Microsoft Business Center service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\MsbcRestClient\Model;

use \ArrayAccess;
use \Spy\MsbcRestClient\ObjectSerializer;

/**
 * SpyCountry Class Doc Comment
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpyCountry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SpyCountryModelFields
      */
    public static function GetModelFields(): SpyCountryModelFields
    {
        return new SpyCountryModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SpyCountryModelAttributes
      */
    public static function GetModelAttributes(): SpyCountryModelAttributes
    {
        return new SpyCountryModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpyCountry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_odata_etag' => 'string',
        'code' => 'string',
        'name' => 'string',
        'iso_code' => 'string',
        'iso_numeric_code' => 'string',
        'address_format' => 'string',
        'contact_address_format' => 'string',
        'county_name' => 'string',
        'eu_country_region_code' => 'string',
        'intrastat_code' => 'string',
        'oioubl_country_region_code' => 'string',
        'vat_scheme' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_odata_etag' => null,
        'code' => null,
        'name' => null,
        'iso_code' => null,
        'iso_numeric_code' => null,
        'address_format' => null,
        'contact_address_format' => null,
        'county_name' => null,
        'eu_country_region_code' => null,
        'intrastat_code' => null,
        'oioubl_country_region_code' => null,
        'vat_scheme' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_odata_etag' => false,
		'code' => false,
		'name' => false,
		'iso_code' => false,
		'iso_numeric_code' => false,
		'address_format' => false,
		'contact_address_format' => false,
		'county_name' => false,
		'eu_country_region_code' => false,
		'intrastat_code' => false,
		'oioubl_country_region_code' => false,
		'vat_scheme' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_odata_etag' => '@odata.etag',
        'code' => 'Code',
        'name' => 'Name',
        'iso_code' => 'ISO_Code',
        'iso_numeric_code' => 'ISO_Numeric_Code',
        'address_format' => 'Address_Format',
        'contact_address_format' => 'Contact_Address_Format',
        'county_name' => 'County_Name',
        'eu_country_region_code' => 'EU_Country_Region_Code',
        'intrastat_code' => 'Intrastat_Code',
        'oioubl_country_region_code' => 'OIOUBL_Country_Region_Code',
        'vat_scheme' => 'VAT_Scheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_odata_etag' => 'setAtOdataEtag',
        'code' => 'setCode',
        'name' => 'setName',
        'iso_code' => 'setIsoCode',
        'iso_numeric_code' => 'setIsoNumericCode',
        'address_format' => 'setAddressFormat',
        'contact_address_format' => 'setContactAddressFormat',
        'county_name' => 'setCountyName',
        'eu_country_region_code' => 'setEuCountryRegionCode',
        'intrastat_code' => 'setIntrastatCode',
        'oioubl_country_region_code' => 'setOioublCountryRegionCode',
        'vat_scheme' => 'setVatScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_odata_etag' => 'getAtOdataEtag',
        'code' => 'getCode',
        'name' => 'getName',
        'iso_code' => 'getIsoCode',
        'iso_numeric_code' => 'getIsoNumericCode',
        'address_format' => 'getAddressFormat',
        'contact_address_format' => 'getContactAddressFormat',
        'county_name' => 'getCountyName',
        'eu_country_region_code' => 'getEuCountryRegionCode',
        'intrastat_code' => 'getIntrastatCode',
        'oioubl_country_region_code' => 'getOioublCountryRegionCode',
        'vat_scheme' => 'getVatScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ADDRESS_FORMAT_POST_CODECITY = 'Post Code+City';
    public const ADDRESS_FORMAT_CITYPOST_CODE = 'City+Post Code';
    public const ADDRESS_FORMAT_CITYCOUNTYPOST_CODE = 'City+County+Post Code';
    public const ADDRESS_FORMAT_BLANK_LINEPOST_CODECITY = 'Blank Line+Post Code+City';
    public const ADDRESS_FORMAT_CUSTOM = 'Custom';
    public const CONTACT_ADDRESS_FORMAT_FIRST = 'First';
    public const CONTACT_ADDRESS_FORMAT_AFTER_COMPANY_NAME = 'After Company Name';
    public const CONTACT_ADDRESS_FORMAT_LAST = 'Last';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressFormatAllowableValues()
    {
        return [
            self::ADDRESS_FORMAT_POST_CODECITY,
            self::ADDRESS_FORMAT_CITYPOST_CODE,
            self::ADDRESS_FORMAT_CITYCOUNTYPOST_CODE,
            self::ADDRESS_FORMAT_BLANK_LINEPOST_CODECITY,
            self::ADDRESS_FORMAT_CUSTOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactAddressFormatAllowableValues()
    {
        return [
            self::CONTACT_ADDRESS_FORMAT_FIRST,
            self::CONTACT_ADDRESS_FORMAT_AFTER_COMPANY_NAME,
            self::CONTACT_ADDRESS_FORMAT_LAST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_odata_etag', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('iso_code', $data ?? [], null);
        $this->setIfExists('iso_numeric_code', $data ?? [], null);
        $this->setIfExists('address_format', $data ?? [], 'Post Code+City');
        $this->setIfExists('contact_address_format', $data ?? [], 'First');
        $this->setIfExists('county_name', $data ?? [], null);
        $this->setIfExists('eu_country_region_code', $data ?? [], null);
        $this->setIfExists('intrastat_code', $data ?? [], null);
        $this->setIfExists('oioubl_country_region_code', $data ?? [], null);
        $this->setIfExists('vat_scheme', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressFormatAllowableValues();
        if (!is_null($this->container['address_format']) && !in_array($this->container['address_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'address_format', must be one of '%s'",
                $this->container['address_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContactAddressFormatAllowableValues();
        if (!is_null($this->container['contact_address_format']) && !in_array($this->container['contact_address_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contact_address_format', must be one of '%s'",
                $this->container['contact_address_format'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_odata_etag
     *
     * @return string|null
     */
    public function getAtOdataEtag()
    {
        return $this->container['at_odata_etag'];
    }

    /**
     * Sets at_odata_etag
     *
     * @param string|null $at_odata_etag If-Match header for updates
     *
     * @return self
     */
    public function setAtOdataEtag($at_odata_etag)
    {

        if (is_null($at_odata_etag)) {
            throw new \InvalidArgumentException('non-nullable at_odata_etag cannot be null');
        }

        $this->container['at_odata_etag'] = $at_odata_etag;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {

        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets iso_code
     *
     * @return string|null
     */
    public function getIsoCode()
    {
        return $this->container['iso_code'];
    }

    /**
     * Sets iso_code
     *
     * @param string|null $iso_code iso_code
     *
     * @return self
     */
    public function setIsoCode($iso_code)
    {

        if (is_null($iso_code)) {
            throw new \InvalidArgumentException('non-nullable iso_code cannot be null');
        }

        $this->container['iso_code'] = $iso_code;

        return $this;
    }

    /**
     * Gets iso_numeric_code
     *
     * @return string|null
     */
    public function getIsoNumericCode()
    {
        return $this->container['iso_numeric_code'];
    }

    /**
     * Sets iso_numeric_code
     *
     * @param string|null $iso_numeric_code iso_numeric_code
     *
     * @return self
     */
    public function setIsoNumericCode($iso_numeric_code)
    {

        if (is_null($iso_numeric_code)) {
            throw new \InvalidArgumentException('non-nullable iso_numeric_code cannot be null');
        }

        $this->container['iso_numeric_code'] = $iso_numeric_code;

        return $this;
    }

    /**
     * Gets address_format
     *
     * @return string|null
     */
    public function getAddressFormat()
    {
        return $this->container['address_format'];
    }

    /**
     * Sets address_format
     *
     * @param string|null $address_format address_format
     *
     * @return self
     */
    public function setAddressFormat($address_format)
    {
        $allowedValues = $this->getAddressFormatAllowableValues();
        if (!is_null($address_format) && !in_array($address_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'address_format', must be one of '%s'",
                    $address_format,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($address_format)) {
            throw new \InvalidArgumentException('non-nullable address_format cannot be null');
        }

        $this->container['address_format'] = $address_format;

        return $this;
    }

    /**
     * Gets contact_address_format
     *
     * @return string|null
     */
    public function getContactAddressFormat()
    {
        return $this->container['contact_address_format'];
    }

    /**
     * Sets contact_address_format
     *
     * @param string|null $contact_address_format contact_address_format
     *
     * @return self
     */
    public function setContactAddressFormat($contact_address_format)
    {
        $allowedValues = $this->getContactAddressFormatAllowableValues();
        if (!is_null($contact_address_format) && !in_array($contact_address_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contact_address_format', must be one of '%s'",
                    $contact_address_format,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($contact_address_format)) {
            throw new \InvalidArgumentException('non-nullable contact_address_format cannot be null');
        }

        $this->container['contact_address_format'] = $contact_address_format;

        return $this;
    }

    /**
     * Gets county_name
     *
     * @return string|null
     */
    public function getCountyName()
    {
        return $this->container['county_name'];
    }

    /**
     * Sets county_name
     *
     * @param string|null $county_name county_name
     *
     * @return self
     */
    public function setCountyName($county_name)
    {

        if (is_null($county_name)) {
            throw new \InvalidArgumentException('non-nullable county_name cannot be null');
        }

        $this->container['county_name'] = $county_name;

        return $this;
    }

    /**
     * Gets eu_country_region_code
     *
     * @return string|null
     */
    public function getEuCountryRegionCode()
    {
        return $this->container['eu_country_region_code'];
    }

    /**
     * Sets eu_country_region_code
     *
     * @param string|null $eu_country_region_code eu_country_region_code
     *
     * @return self
     */
    public function setEuCountryRegionCode($eu_country_region_code)
    {

        if (is_null($eu_country_region_code)) {
            throw new \InvalidArgumentException('non-nullable eu_country_region_code cannot be null');
        }

        $this->container['eu_country_region_code'] = $eu_country_region_code;

        return $this;
    }

    /**
     * Gets intrastat_code
     *
     * @return string|null
     */
    public function getIntrastatCode()
    {
        return $this->container['intrastat_code'];
    }

    /**
     * Sets intrastat_code
     *
     * @param string|null $intrastat_code intrastat_code
     *
     * @return self
     */
    public function setIntrastatCode($intrastat_code)
    {

        if (is_null($intrastat_code)) {
            throw new \InvalidArgumentException('non-nullable intrastat_code cannot be null');
        }

        $this->container['intrastat_code'] = $intrastat_code;

        return $this;
    }

    /**
     * Gets oioubl_country_region_code
     *
     * @return string|null
     */
    public function getOioublCountryRegionCode()
    {
        return $this->container['oioubl_country_region_code'];
    }

    /**
     * Sets oioubl_country_region_code
     *
     * @param string|null $oioubl_country_region_code oioubl_country_region_code
     *
     * @return self
     */
    public function setOioublCountryRegionCode($oioubl_country_region_code)
    {

        if (is_null($oioubl_country_region_code)) {
            throw new \InvalidArgumentException('non-nullable oioubl_country_region_code cannot be null');
        }

        $this->container['oioubl_country_region_code'] = $oioubl_country_region_code;

        return $this;
    }

    /**
     * Gets vat_scheme
     *
     * @return string|null
     */
    public function getVatScheme()
    {
        return $this->container['vat_scheme'];
    }

    /**
     * Sets vat_scheme
     *
     * @param string|null $vat_scheme vat_scheme
     *
     * @return self
     */
    public function setVatScheme($vat_scheme)
    {

        if (is_null($vat_scheme)) {
            throw new \InvalidArgumentException('non-nullable vat_scheme cannot be null');
        }

        $this->container['vat_scheme'] = $vat_scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


