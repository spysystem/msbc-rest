<?php
/**
 * SpySupplier
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Microsoft Business Center API
 *
 * The Microsoft Business Center API is a RESTful API that provides an interface to the Microsoft Business Center service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\MsbcRestClient\Model;

use \ArrayAccess;
use \Spy\MsbcRestClient\ObjectSerializer;

/**
 * SpySupplier Class Doc Comment
 *
 * @category Class
 * @package  Spy\MsbcRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SpySupplier implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return SpySupplierModelFields
      */
    public static function GetModelFields(): SpySupplierModelFields
    {
        return new SpySupplierModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return SpySupplierModelAttributes
      */
    public static function GetModelAttributes(): SpySupplierModelAttributes
    {
        return new SpySupplierModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SpySupplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_odata_etag' => 'string',
        'no' => 'string',
        'name' => 'string',
        'name_2' => 'string',
        'blocked' => 'string',
        'privacy_blocked' => 'bool',
        'last_date_modified' => 'string',
        'balance_lcy' => 'float',
        'balance_as_customer' => 'int',
        'balance_due_lcy' => 'float',
        'document_sending_profile' => 'string',
        'search_name' => 'string',
        'ic_partner_code' => 'string',
        'purchaser_code' => 'string',
        'responsibility_center' => 'string',
        'disable_search_by_name' => 'bool',
        'address' => 'string',
        'address_2' => 'string',
        'country_region_code' => 'string',
        'city' => 'string',
        'county' => 'string',
        'post_code' => 'string',
        'show_map' => 'string',
        'phone_no' => 'string',
        'mobile_phone_no' => 'string',
        'e_mail' => 'string',
        'fax_no' => 'string',
        'home_page' => 'string',
        'our_account_no' => 'string',
        'language_code' => 'string',
        'primary_contact_no' => 'string',
        'control16' => 'string',
        'vat_registration_no' => 'string',
        'eori_number' => 'string',
        'gln' => 'string',
        'tax_liable' => 'bool',
        'tax_area_code' => 'string',
        'pay_to_vendor_no' => 'string',
        'invoice_disc_code' => 'string',
        'prices_including_vat' => 'bool',
        'price_calculation_method' => 'string',
        'gen_bus_posting_group' => 'string',
        'vat_bus_posting_group' => 'string',
        'vendor_posting_group' => 'string',
        'currency_code' => 'string',
        'prepayment_percent' => 'float',
        'application_method' => 'string',
        'payment_terms_code' => 'string',
        'payment_method_code' => 'string',
        'priority' => 'int',
        'block_payment_tolerance' => 'bool',
        'preferred_bank_account_code' => 'string',
        'partner_type' => 'string',
        'cash_flow_payment_terms_code' => 'string',
        'creditor_no' => 'string',
        'giro_acc_no' => 'string',
        'location_code' => 'string',
        'shipment_method_code' => 'string',
        'lead_time_calculation' => 'string',
        'base_calendar_code' => 'string',
        'customized_calendar' => 'string',
        'over_receipt_code' => 'string',
        'global_dimension_1_filter' => 'string',
        'global_dimension_2_filter' => 'string',
        'currency_filter' => 'string',
        'date_filter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_odata_etag' => null,
        'no' => null,
        'name' => null,
        'name_2' => null,
        'blocked' => null,
        'privacy_blocked' => null,
        'last_date_modified' => null,
        'balance_lcy' => null,
        'balance_as_customer' => null,
        'balance_due_lcy' => null,
        'document_sending_profile' => null,
        'search_name' => null,
        'ic_partner_code' => null,
        'purchaser_code' => null,
        'responsibility_center' => null,
        'disable_search_by_name' => null,
        'address' => null,
        'address_2' => null,
        'country_region_code' => null,
        'city' => null,
        'county' => null,
        'post_code' => null,
        'show_map' => null,
        'phone_no' => null,
        'mobile_phone_no' => null,
        'e_mail' => null,
        'fax_no' => null,
        'home_page' => null,
        'our_account_no' => null,
        'language_code' => null,
        'primary_contact_no' => null,
        'control16' => null,
        'vat_registration_no' => null,
        'eori_number' => null,
        'gln' => null,
        'tax_liable' => null,
        'tax_area_code' => null,
        'pay_to_vendor_no' => null,
        'invoice_disc_code' => null,
        'prices_including_vat' => null,
        'price_calculation_method' => null,
        'gen_bus_posting_group' => null,
        'vat_bus_posting_group' => null,
        'vendor_posting_group' => null,
        'currency_code' => null,
        'prepayment_percent' => null,
        'application_method' => null,
        'payment_terms_code' => null,
        'payment_method_code' => null,
        'priority' => null,
        'block_payment_tolerance' => null,
        'preferred_bank_account_code' => null,
        'partner_type' => null,
        'cash_flow_payment_terms_code' => null,
        'creditor_no' => null,
        'giro_acc_no' => null,
        'location_code' => null,
        'shipment_method_code' => null,
        'lead_time_calculation' => null,
        'base_calendar_code' => null,
        'customized_calendar' => null,
        'over_receipt_code' => null,
        'global_dimension_1_filter' => null,
        'global_dimension_2_filter' => null,
        'currency_filter' => null,
        'date_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_odata_etag' => false,
		'no' => false,
		'name' => false,
		'name_2' => false,
		'blocked' => false,
		'privacy_blocked' => false,
		'last_date_modified' => false,
		'balance_lcy' => false,
		'balance_as_customer' => false,
		'balance_due_lcy' => false,
		'document_sending_profile' => false,
		'search_name' => false,
		'ic_partner_code' => false,
		'purchaser_code' => false,
		'responsibility_center' => false,
		'disable_search_by_name' => false,
		'address' => false,
		'address_2' => false,
		'country_region_code' => false,
		'city' => false,
		'county' => false,
		'post_code' => false,
		'show_map' => false,
		'phone_no' => false,
		'mobile_phone_no' => false,
		'e_mail' => false,
		'fax_no' => false,
		'home_page' => false,
		'our_account_no' => false,
		'language_code' => false,
		'primary_contact_no' => false,
		'control16' => false,
		'vat_registration_no' => false,
		'eori_number' => false,
		'gln' => false,
		'tax_liable' => false,
		'tax_area_code' => false,
		'pay_to_vendor_no' => false,
		'invoice_disc_code' => false,
		'prices_including_vat' => false,
		'price_calculation_method' => false,
		'gen_bus_posting_group' => false,
		'vat_bus_posting_group' => false,
		'vendor_posting_group' => false,
		'currency_code' => false,
		'prepayment_percent' => false,
		'application_method' => false,
		'payment_terms_code' => false,
		'payment_method_code' => false,
		'priority' => false,
		'block_payment_tolerance' => false,
		'preferred_bank_account_code' => false,
		'partner_type' => false,
		'cash_flow_payment_terms_code' => false,
		'creditor_no' => false,
		'giro_acc_no' => false,
		'location_code' => false,
		'shipment_method_code' => false,
		'lead_time_calculation' => false,
		'base_calendar_code' => false,
		'customized_calendar' => false,
		'over_receipt_code' => false,
		'global_dimension_1_filter' => false,
		'global_dimension_2_filter' => false,
		'currency_filter' => false,
		'date_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_odata_etag' => '@odata.etag',
        'no' => 'No',
        'name' => 'Name',
        'name_2' => 'Name_2',
        'blocked' => 'Blocked',
        'privacy_blocked' => 'Privacy_Blocked',
        'last_date_modified' => 'Last_Date_Modified',
        'balance_lcy' => 'Balance_LCY',
        'balance_as_customer' => 'BalanceAsCustomer',
        'balance_due_lcy' => 'Balance_Due_LCY',
        'document_sending_profile' => 'Document_Sending_Profile',
        'search_name' => 'Search_Name',
        'ic_partner_code' => 'IC_Partner_Code',
        'purchaser_code' => 'Purchaser_Code',
        'responsibility_center' => 'Responsibility_Center',
        'disable_search_by_name' => 'Disable_Search_by_Name',
        'address' => 'Address',
        'address_2' => 'Address_2',
        'country_region_code' => 'Country_Region_Code',
        'city' => 'City',
        'county' => 'County',
        'post_code' => 'Post_Code',
        'show_map' => 'ShowMap',
        'phone_no' => 'Phone_No',
        'mobile_phone_no' => 'MobilePhoneNo',
        'e_mail' => 'E_Mail',
        'fax_no' => 'Fax_No',
        'home_page' => 'Home_Page',
        'our_account_no' => 'Our_Account_No',
        'language_code' => 'Language_Code',
        'primary_contact_no' => 'Primary_Contact_No',
        'control16' => 'Control16',
        'vat_registration_no' => 'VAT_Registration_No',
        'eori_number' => 'EORI_Number',
        'gln' => 'GLN',
        'tax_liable' => 'Tax_Liable',
        'tax_area_code' => 'Tax_Area_Code',
        'pay_to_vendor_no' => 'Pay_to_Vendor_No',
        'invoice_disc_code' => 'Invoice_Disc_Code',
        'prices_including_vat' => 'Prices_Including_VAT',
        'price_calculation_method' => 'Price_Calculation_Method',
        'gen_bus_posting_group' => 'Gen_Bus_Posting_Group',
        'vat_bus_posting_group' => 'VAT_Bus_Posting_Group',
        'vendor_posting_group' => 'Vendor_Posting_Group',
        'currency_code' => 'Currency_Code',
        'prepayment_percent' => 'Prepayment_Percent',
        'application_method' => 'Application_Method',
        'payment_terms_code' => 'Payment_Terms_Code',
        'payment_method_code' => 'Payment_Method_Code',
        'priority' => 'Priority',
        'block_payment_tolerance' => 'Block_Payment_Tolerance',
        'preferred_bank_account_code' => 'Preferred_Bank_Account_Code',
        'partner_type' => 'Partner_Type',
        'cash_flow_payment_terms_code' => 'Cash_Flow_Payment_Terms_Code',
        'creditor_no' => 'Creditor_No',
        'giro_acc_no' => 'Giro_Acc_No',
        'location_code' => 'Location_Code',
        'shipment_method_code' => 'Shipment_Method_Code',
        'lead_time_calculation' => 'Lead_Time_Calculation',
        'base_calendar_code' => 'Base_Calendar_Code',
        'customized_calendar' => 'Customized_Calendar',
        'over_receipt_code' => 'Over_Receipt_Code',
        'global_dimension_1_filter' => 'Global_Dimension_1_Filter',
        'global_dimension_2_filter' => 'Global_Dimension_2_Filter',
        'currency_filter' => 'Currency_Filter',
        'date_filter' => 'Date_Filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_odata_etag' => 'setAtOdataEtag',
        'no' => 'setNo',
        'name' => 'setName',
        'name_2' => 'setName2',
        'blocked' => 'setBlocked',
        'privacy_blocked' => 'setPrivacyBlocked',
        'last_date_modified' => 'setLastDateModified',
        'balance_lcy' => 'setBalanceLcy',
        'balance_as_customer' => 'setBalanceAsCustomer',
        'balance_due_lcy' => 'setBalanceDueLcy',
        'document_sending_profile' => 'setDocumentSendingProfile',
        'search_name' => 'setSearchName',
        'ic_partner_code' => 'setIcPartnerCode',
        'purchaser_code' => 'setPurchaserCode',
        'responsibility_center' => 'setResponsibilityCenter',
        'disable_search_by_name' => 'setDisableSearchByName',
        'address' => 'setAddress',
        'address_2' => 'setAddress2',
        'country_region_code' => 'setCountryRegionCode',
        'city' => 'setCity',
        'county' => 'setCounty',
        'post_code' => 'setPostCode',
        'show_map' => 'setShowMap',
        'phone_no' => 'setPhoneNo',
        'mobile_phone_no' => 'setMobilePhoneNo',
        'e_mail' => 'setEMail',
        'fax_no' => 'setFaxNo',
        'home_page' => 'setHomePage',
        'our_account_no' => 'setOurAccountNo',
        'language_code' => 'setLanguageCode',
        'primary_contact_no' => 'setPrimaryContactNo',
        'control16' => 'setControl16',
        'vat_registration_no' => 'setVatRegistrationNo',
        'eori_number' => 'setEoriNumber',
        'gln' => 'setGln',
        'tax_liable' => 'setTaxLiable',
        'tax_area_code' => 'setTaxAreaCode',
        'pay_to_vendor_no' => 'setPayToVendorNo',
        'invoice_disc_code' => 'setInvoiceDiscCode',
        'prices_including_vat' => 'setPricesIncludingVat',
        'price_calculation_method' => 'setPriceCalculationMethod',
        'gen_bus_posting_group' => 'setGenBusPostingGroup',
        'vat_bus_posting_group' => 'setVatBusPostingGroup',
        'vendor_posting_group' => 'setVendorPostingGroup',
        'currency_code' => 'setCurrencyCode',
        'prepayment_percent' => 'setPrepaymentPercent',
        'application_method' => 'setApplicationMethod',
        'payment_terms_code' => 'setPaymentTermsCode',
        'payment_method_code' => 'setPaymentMethodCode',
        'priority' => 'setPriority',
        'block_payment_tolerance' => 'setBlockPaymentTolerance',
        'preferred_bank_account_code' => 'setPreferredBankAccountCode',
        'partner_type' => 'setPartnerType',
        'cash_flow_payment_terms_code' => 'setCashFlowPaymentTermsCode',
        'creditor_no' => 'setCreditorNo',
        'giro_acc_no' => 'setGiroAccNo',
        'location_code' => 'setLocationCode',
        'shipment_method_code' => 'setShipmentMethodCode',
        'lead_time_calculation' => 'setLeadTimeCalculation',
        'base_calendar_code' => 'setBaseCalendarCode',
        'customized_calendar' => 'setCustomizedCalendar',
        'over_receipt_code' => 'setOverReceiptCode',
        'global_dimension_1_filter' => 'setGlobalDimension1Filter',
        'global_dimension_2_filter' => 'setGlobalDimension2Filter',
        'currency_filter' => 'setCurrencyFilter',
        'date_filter' => 'setDateFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_odata_etag' => 'getAtOdataEtag',
        'no' => 'getNo',
        'name' => 'getName',
        'name_2' => 'getName2',
        'blocked' => 'getBlocked',
        'privacy_blocked' => 'getPrivacyBlocked',
        'last_date_modified' => 'getLastDateModified',
        'balance_lcy' => 'getBalanceLcy',
        'balance_as_customer' => 'getBalanceAsCustomer',
        'balance_due_lcy' => 'getBalanceDueLcy',
        'document_sending_profile' => 'getDocumentSendingProfile',
        'search_name' => 'getSearchName',
        'ic_partner_code' => 'getIcPartnerCode',
        'purchaser_code' => 'getPurchaserCode',
        'responsibility_center' => 'getResponsibilityCenter',
        'disable_search_by_name' => 'getDisableSearchByName',
        'address' => 'getAddress',
        'address_2' => 'getAddress2',
        'country_region_code' => 'getCountryRegionCode',
        'city' => 'getCity',
        'county' => 'getCounty',
        'post_code' => 'getPostCode',
        'show_map' => 'getShowMap',
        'phone_no' => 'getPhoneNo',
        'mobile_phone_no' => 'getMobilePhoneNo',
        'e_mail' => 'getEMail',
        'fax_no' => 'getFaxNo',
        'home_page' => 'getHomePage',
        'our_account_no' => 'getOurAccountNo',
        'language_code' => 'getLanguageCode',
        'primary_contact_no' => 'getPrimaryContactNo',
        'control16' => 'getControl16',
        'vat_registration_no' => 'getVatRegistrationNo',
        'eori_number' => 'getEoriNumber',
        'gln' => 'getGln',
        'tax_liable' => 'getTaxLiable',
        'tax_area_code' => 'getTaxAreaCode',
        'pay_to_vendor_no' => 'getPayToVendorNo',
        'invoice_disc_code' => 'getInvoiceDiscCode',
        'prices_including_vat' => 'getPricesIncludingVat',
        'price_calculation_method' => 'getPriceCalculationMethod',
        'gen_bus_posting_group' => 'getGenBusPostingGroup',
        'vat_bus_posting_group' => 'getVatBusPostingGroup',
        'vendor_posting_group' => 'getVendorPostingGroup',
        'currency_code' => 'getCurrencyCode',
        'prepayment_percent' => 'getPrepaymentPercent',
        'application_method' => 'getApplicationMethod',
        'payment_terms_code' => 'getPaymentTermsCode',
        'payment_method_code' => 'getPaymentMethodCode',
        'priority' => 'getPriority',
        'block_payment_tolerance' => 'getBlockPaymentTolerance',
        'preferred_bank_account_code' => 'getPreferredBankAccountCode',
        'partner_type' => 'getPartnerType',
        'cash_flow_payment_terms_code' => 'getCashFlowPaymentTermsCode',
        'creditor_no' => 'getCreditorNo',
        'giro_acc_no' => 'getGiroAccNo',
        'location_code' => 'getLocationCode',
        'shipment_method_code' => 'getShipmentMethodCode',
        'lead_time_calculation' => 'getLeadTimeCalculation',
        'base_calendar_code' => 'getBaseCalendarCode',
        'customized_calendar' => 'getCustomizedCalendar',
        'over_receipt_code' => 'getOverReceiptCode',
        'global_dimension_1_filter' => 'getGlobalDimension1Filter',
        'global_dimension_2_filter' => 'getGlobalDimension2Filter',
        'currency_filter' => 'getCurrencyFilter',
        'date_filter' => 'getDateFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BLOCKED_SPACE_1 = ' ';
    public const BLOCKED_PAYMENT = 'Payment';
    public const BLOCKED_ALL = 'All';
    public const PRICE_CALCULATION_METHOD_SPACE_1 = ' ';
    public const PRICE_CALCULATION_METHOD_LOWEST_PRICE = 'Lowest Price';
    public const APPLICATION_METHOD_MANUAL = 'Manual';
    public const APPLICATION_METHOD_APPLY_TO_OLDEST = 'Apply to Oldest';
    public const PARTNER_TYPE_SPACE_1 = ' ';
    public const PARTNER_TYPE_COMPANY = 'Company';
    public const PARTNER_TYPE_PERSON = 'Person';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockedAllowableValues()
    {
        return [
            self::BLOCKED_SPACE_1,
            self::BLOCKED_PAYMENT,
            self::BLOCKED_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceCalculationMethodAllowableValues()
    {
        return [
            self::PRICE_CALCULATION_METHOD_SPACE_1,
            self::PRICE_CALCULATION_METHOD_LOWEST_PRICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplicationMethodAllowableValues()
    {
        return [
            self::APPLICATION_METHOD_MANUAL,
            self::APPLICATION_METHOD_APPLY_TO_OLDEST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartnerTypeAllowableValues()
    {
        return [
            self::PARTNER_TYPE_SPACE_1,
            self::PARTNER_TYPE_COMPANY,
            self::PARTNER_TYPE_PERSON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('at_odata_etag', $data ?? [], null);
        $this->setIfExists('no', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_2', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], ' ');
        $this->setIfExists('privacy_blocked', $data ?? [], null);
        $this->setIfExists('last_date_modified', $data ?? [], null);
        $this->setIfExists('balance_lcy', $data ?? [], null);
        $this->setIfExists('balance_as_customer', $data ?? [], null);
        $this->setIfExists('balance_due_lcy', $data ?? [], null);
        $this->setIfExists('document_sending_profile', $data ?? [], null);
        $this->setIfExists('search_name', $data ?? [], null);
        $this->setIfExists('ic_partner_code', $data ?? [], null);
        $this->setIfExists('purchaser_code', $data ?? [], null);
        $this->setIfExists('responsibility_center', $data ?? [], null);
        $this->setIfExists('disable_search_by_name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('address_2', $data ?? [], null);
        $this->setIfExists('country_region_code', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('show_map', $data ?? [], null);
        $this->setIfExists('phone_no', $data ?? [], null);
        $this->setIfExists('mobile_phone_no', $data ?? [], null);
        $this->setIfExists('e_mail', $data ?? [], null);
        $this->setIfExists('fax_no', $data ?? [], null);
        $this->setIfExists('home_page', $data ?? [], null);
        $this->setIfExists('our_account_no', $data ?? [], null);
        $this->setIfExists('language_code', $data ?? [], null);
        $this->setIfExists('primary_contact_no', $data ?? [], null);
        $this->setIfExists('control16', $data ?? [], null);
        $this->setIfExists('vat_registration_no', $data ?? [], null);
        $this->setIfExists('eori_number', $data ?? [], null);
        $this->setIfExists('gln', $data ?? [], null);
        $this->setIfExists('tax_liable', $data ?? [], null);
        $this->setIfExists('tax_area_code', $data ?? [], null);
        $this->setIfExists('pay_to_vendor_no', $data ?? [], null);
        $this->setIfExists('invoice_disc_code', $data ?? [], null);
        $this->setIfExists('prices_including_vat', $data ?? [], null);
        $this->setIfExists('price_calculation_method', $data ?? [], ' ');
        $this->setIfExists('gen_bus_posting_group', $data ?? [], null);
        $this->setIfExists('vat_bus_posting_group', $data ?? [], null);
        $this->setIfExists('vendor_posting_group', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('prepayment_percent', $data ?? [], null);
        $this->setIfExists('application_method', $data ?? [], 'Manual');
        $this->setIfExists('payment_terms_code', $data ?? [], null);
        $this->setIfExists('payment_method_code', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('block_payment_tolerance', $data ?? [], null);
        $this->setIfExists('preferred_bank_account_code', $data ?? [], null);
        $this->setIfExists('partner_type', $data ?? [], ' ');
        $this->setIfExists('cash_flow_payment_terms_code', $data ?? [], null);
        $this->setIfExists('creditor_no', $data ?? [], null);
        $this->setIfExists('giro_acc_no', $data ?? [], null);
        $this->setIfExists('location_code', $data ?? [], null);
        $this->setIfExists('shipment_method_code', $data ?? [], null);
        $this->setIfExists('lead_time_calculation', $data ?? [], null);
        $this->setIfExists('base_calendar_code', $data ?? [], null);
        $this->setIfExists('customized_calendar', $data ?? [], null);
        $this->setIfExists('over_receipt_code', $data ?? [], null);
        $this->setIfExists('global_dimension_1_filter', $data ?? [], null);
        $this->setIfExists('global_dimension_2_filter', $data ?? [], null);
        $this->setIfExists('currency_filter', $data ?? [], null);
        $this->setIfExists('date_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBlockedAllowableValues();
        if (!is_null($this->container['blocked']) && !in_array($this->container['blocked'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blocked', must be one of '%s'",
                $this->container['blocked'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPriceCalculationMethodAllowableValues();
        if (!is_null($this->container['price_calculation_method']) && !in_array($this->container['price_calculation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'price_calculation_method', must be one of '%s'",
                $this->container['price_calculation_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApplicationMethodAllowableValues();
        if (!is_null($this->container['application_method']) && !in_array($this->container['application_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'application_method', must be one of '%s'",
                $this->container['application_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($this->container['partner_type']) && !in_array($this->container['partner_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'partner_type', must be one of '%s'",
                $this->container['partner_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_odata_etag
     *
     * @return string|null
     */
    public function getAtOdataEtag()
    {
        return $this->container['at_odata_etag'];
    }

    /**
     * Sets at_odata_etag
     *
     * @param string|null $at_odata_etag If-Match header for updates
     *
     * @return self
     */
    public function setAtOdataEtag($at_odata_etag)
    {

        if (is_null($at_odata_etag)) {
            throw new \InvalidArgumentException('non-nullable at_odata_etag cannot be null');
        }

        $this->container['at_odata_etag'] = $at_odata_etag;

        return $this;
    }

    /**
     * Gets no
     *
     * @return string|null
     */
    public function getNo()
    {
        return $this->container['no'];
    }

    /**
     * Sets no
     *
     * @param string|null $no no
     *
     * @return self
     */
    public function setNo($no)
    {

        if (is_null($no)) {
            throw new \InvalidArgumentException('non-nullable no cannot be null');
        }

        $this->container['no'] = $no;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name_2'];
    }

    /**
     * Sets name_2
     *
     * @param string|null $name_2 name_2
     *
     * @return self
     */
    public function setName2($name_2)
    {

        if (is_null($name_2)) {
            throw new \InvalidArgumentException('non-nullable name_2 cannot be null');
        }

        $this->container['name_2'] = $name_2;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return string|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param string|null $blocked blocked
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        $allowedValues = $this->getBlockedAllowableValues();
        if (!is_null($blocked) && !in_array($blocked, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blocked', must be one of '%s'",
                    $blocked,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($blocked)) {
            throw new \InvalidArgumentException('non-nullable blocked cannot be null');
        }

        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets privacy_blocked
     *
     * @return bool|null
     */
    public function getPrivacyBlocked()
    {
        return $this->container['privacy_blocked'];
    }

    /**
     * Sets privacy_blocked
     *
     * @param bool|null $privacy_blocked privacy_blocked
     *
     * @return self
     */
    public function setPrivacyBlocked($privacy_blocked)
    {

        if (is_null($privacy_blocked)) {
            throw new \InvalidArgumentException('non-nullable privacy_blocked cannot be null');
        }

        $this->container['privacy_blocked'] = $privacy_blocked;

        return $this;
    }

    /**
     * Gets last_date_modified
     *
     * @return string|null
     */
    public function getLastDateModified()
    {
        return $this->container['last_date_modified'];
    }

    /**
     * Sets last_date_modified
     *
     * @param string|null $last_date_modified last_date_modified
     *
     * @return self
     */
    public function setLastDateModified($last_date_modified)
    {

        if (is_null($last_date_modified)) {
            throw new \InvalidArgumentException('non-nullable last_date_modified cannot be null');
        }

        $this->container['last_date_modified'] = $last_date_modified;

        return $this;
    }

    /**
     * Gets balance_lcy
     *
     * @return float|null
     */
    public function getBalanceLcy()
    {
        return $this->container['balance_lcy'];
    }

    /**
     * Sets balance_lcy
     *
     * @param float|null $balance_lcy balance_lcy
     *
     * @return self
     */
    public function setBalanceLcy($balance_lcy)
    {

        if (is_null($balance_lcy)) {
            throw new \InvalidArgumentException('non-nullable balance_lcy cannot be null');
        }

        $this->container['balance_lcy'] = $balance_lcy;

        return $this;
    }

    /**
     * Gets balance_as_customer
     *
     * @return int|null
     */
    public function getBalanceAsCustomer()
    {
        return $this->container['balance_as_customer'];
    }

    /**
     * Sets balance_as_customer
     *
     * @param int|null $balance_as_customer balance_as_customer
     *
     * @return self
     */
    public function setBalanceAsCustomer($balance_as_customer)
    {

        if (is_null($balance_as_customer)) {
            throw new \InvalidArgumentException('non-nullable balance_as_customer cannot be null');
        }

        $this->container['balance_as_customer'] = $balance_as_customer;

        return $this;
    }

    /**
     * Gets balance_due_lcy
     *
     * @return float|null
     */
    public function getBalanceDueLcy()
    {
        return $this->container['balance_due_lcy'];
    }

    /**
     * Sets balance_due_lcy
     *
     * @param float|null $balance_due_lcy balance_due_lcy
     *
     * @return self
     */
    public function setBalanceDueLcy($balance_due_lcy)
    {

        if (is_null($balance_due_lcy)) {
            throw new \InvalidArgumentException('non-nullable balance_due_lcy cannot be null');
        }

        $this->container['balance_due_lcy'] = $balance_due_lcy;

        return $this;
    }

    /**
     * Gets document_sending_profile
     *
     * @return string|null
     */
    public function getDocumentSendingProfile()
    {
        return $this->container['document_sending_profile'];
    }

    /**
     * Sets document_sending_profile
     *
     * @param string|null $document_sending_profile document_sending_profile
     *
     * @return self
     */
    public function setDocumentSendingProfile($document_sending_profile)
    {

        if (is_null($document_sending_profile)) {
            throw new \InvalidArgumentException('non-nullable document_sending_profile cannot be null');
        }

        $this->container['document_sending_profile'] = $document_sending_profile;

        return $this;
    }

    /**
     * Gets search_name
     *
     * @return string|null
     */
    public function getSearchName()
    {
        return $this->container['search_name'];
    }

    /**
     * Sets search_name
     *
     * @param string|null $search_name search_name
     *
     * @return self
     */
    public function setSearchName($search_name)
    {

        if (is_null($search_name)) {
            throw new \InvalidArgumentException('non-nullable search_name cannot be null');
        }

        $this->container['search_name'] = $search_name;

        return $this;
    }

    /**
     * Gets ic_partner_code
     *
     * @return string|null
     */
    public function getIcPartnerCode()
    {
        return $this->container['ic_partner_code'];
    }

    /**
     * Sets ic_partner_code
     *
     * @param string|null $ic_partner_code ic_partner_code
     *
     * @return self
     */
    public function setIcPartnerCode($ic_partner_code)
    {

        if (is_null($ic_partner_code)) {
            throw new \InvalidArgumentException('non-nullable ic_partner_code cannot be null');
        }

        $this->container['ic_partner_code'] = $ic_partner_code;

        return $this;
    }

    /**
     * Gets purchaser_code
     *
     * @return string|null
     */
    public function getPurchaserCode()
    {
        return $this->container['purchaser_code'];
    }

    /**
     * Sets purchaser_code
     *
     * @param string|null $purchaser_code purchaser_code
     *
     * @return self
     */
    public function setPurchaserCode($purchaser_code)
    {

        if (is_null($purchaser_code)) {
            throw new \InvalidArgumentException('non-nullable purchaser_code cannot be null');
        }

        $this->container['purchaser_code'] = $purchaser_code;

        return $this;
    }

    /**
     * Gets responsibility_center
     *
     * @return string|null
     */
    public function getResponsibilityCenter()
    {
        return $this->container['responsibility_center'];
    }

    /**
     * Sets responsibility_center
     *
     * @param string|null $responsibility_center responsibility_center
     *
     * @return self
     */
    public function setResponsibilityCenter($responsibility_center)
    {

        if (is_null($responsibility_center)) {
            throw new \InvalidArgumentException('non-nullable responsibility_center cannot be null');
        }

        $this->container['responsibility_center'] = $responsibility_center;

        return $this;
    }

    /**
     * Gets disable_search_by_name
     *
     * @return bool|null
     */
    public function getDisableSearchByName()
    {
        return $this->container['disable_search_by_name'];
    }

    /**
     * Sets disable_search_by_name
     *
     * @param bool|null $disable_search_by_name disable_search_by_name
     *
     * @return self
     */
    public function setDisableSearchByName($disable_search_by_name)
    {

        if (is_null($disable_search_by_name)) {
            throw new \InvalidArgumentException('non-nullable disable_search_by_name cannot be null');
        }

        $this->container['disable_search_by_name'] = $disable_search_by_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string|null $address_2 address_2
     *
     * @return self
     */
    public function setAddress2($address_2)
    {

        if (is_null($address_2)) {
            throw new \InvalidArgumentException('non-nullable address_2 cannot be null');
        }

        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets country_region_code
     *
     * @return string|null
     */
    public function getCountryRegionCode()
    {
        return $this->container['country_region_code'];
    }

    /**
     * Sets country_region_code
     *
     * @param string|null $country_region_code country_region_code
     *
     * @return self
     */
    public function setCountryRegionCode($country_region_code)
    {

        if (is_null($country_region_code)) {
            throw new \InvalidArgumentException('non-nullable country_region_code cannot be null');
        }

        $this->container['country_region_code'] = $country_region_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {

        if (is_null($county)) {
            throw new \InvalidArgumentException('non-nullable county cannot be null');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {

        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets show_map
     *
     * @return string|null
     */
    public function getShowMap()
    {
        return $this->container['show_map'];
    }

    /**
     * Sets show_map
     *
     * @param string|null $show_map show_map
     *
     * @return self
     */
    public function setShowMap($show_map)
    {

        if (is_null($show_map)) {
            throw new \InvalidArgumentException('non-nullable show_map cannot be null');
        }

        $this->container['show_map'] = $show_map;

        return $this;
    }

    /**
     * Gets phone_no
     *
     * @return string|null
     */
    public function getPhoneNo()
    {
        return $this->container['phone_no'];
    }

    /**
     * Sets phone_no
     *
     * @param string|null $phone_no phone_no
     *
     * @return self
     */
    public function setPhoneNo($phone_no)
    {

        if (is_null($phone_no)) {
            throw new \InvalidArgumentException('non-nullable phone_no cannot be null');
        }

        $this->container['phone_no'] = $phone_no;

        return $this;
    }

    /**
     * Gets mobile_phone_no
     *
     * @return string|null
     */
    public function getMobilePhoneNo()
    {
        return $this->container['mobile_phone_no'];
    }

    /**
     * Sets mobile_phone_no
     *
     * @param string|null $mobile_phone_no mobile_phone_no
     *
     * @return self
     */
    public function setMobilePhoneNo($mobile_phone_no)
    {

        if (is_null($mobile_phone_no)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone_no cannot be null');
        }

        $this->container['mobile_phone_no'] = $mobile_phone_no;

        return $this;
    }

    /**
     * Gets e_mail
     *
     * @return string|null
     */
    public function getEMail()
    {
        return $this->container['e_mail'];
    }

    /**
     * Sets e_mail
     *
     * @param string|null $e_mail e_mail
     *
     * @return self
     */
    public function setEMail($e_mail)
    {

        if (is_null($e_mail)) {
            throw new \InvalidArgumentException('non-nullable e_mail cannot be null');
        }

        $this->container['e_mail'] = $e_mail;

        return $this;
    }

    /**
     * Gets fax_no
     *
     * @return string|null
     */
    public function getFaxNo()
    {
        return $this->container['fax_no'];
    }

    /**
     * Sets fax_no
     *
     * @param string|null $fax_no fax_no
     *
     * @return self
     */
    public function setFaxNo($fax_no)
    {

        if (is_null($fax_no)) {
            throw new \InvalidArgumentException('non-nullable fax_no cannot be null');
        }

        $this->container['fax_no'] = $fax_no;

        return $this;
    }

    /**
     * Gets home_page
     *
     * @return string|null
     */
    public function getHomePage()
    {
        return $this->container['home_page'];
    }

    /**
     * Sets home_page
     *
     * @param string|null $home_page home_page
     *
     * @return self
     */
    public function setHomePage($home_page)
    {

        if (is_null($home_page)) {
            throw new \InvalidArgumentException('non-nullable home_page cannot be null');
        }

        $this->container['home_page'] = $home_page;

        return $this;
    }

    /**
     * Gets our_account_no
     *
     * @return string|null
     */
    public function getOurAccountNo()
    {
        return $this->container['our_account_no'];
    }

    /**
     * Sets our_account_no
     *
     * @param string|null $our_account_no our_account_no
     *
     * @return self
     */
    public function setOurAccountNo($our_account_no)
    {

        if (is_null($our_account_no)) {
            throw new \InvalidArgumentException('non-nullable our_account_no cannot be null');
        }

        $this->container['our_account_no'] = $our_account_no;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string|null $language_code language_code
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {

        if (is_null($language_code)) {
            throw new \InvalidArgumentException('non-nullable language_code cannot be null');
        }

        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets primary_contact_no
     *
     * @return string|null
     */
    public function getPrimaryContactNo()
    {
        return $this->container['primary_contact_no'];
    }

    /**
     * Sets primary_contact_no
     *
     * @param string|null $primary_contact_no primary_contact_no
     *
     * @return self
     */
    public function setPrimaryContactNo($primary_contact_no)
    {

        if (is_null($primary_contact_no)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_no cannot be null');
        }

        $this->container['primary_contact_no'] = $primary_contact_no;

        return $this;
    }

    /**
     * Gets control16
     *
     * @return string|null
     */
    public function getControl16()
    {
        return $this->container['control16'];
    }

    /**
     * Sets control16
     *
     * @param string|null $control16 control16
     *
     * @return self
     */
    public function setControl16($control16)
    {

        if (is_null($control16)) {
            throw new \InvalidArgumentException('non-nullable control16 cannot be null');
        }

        $this->container['control16'] = $control16;

        return $this;
    }

    /**
     * Gets vat_registration_no
     *
     * @return string|null
     */
    public function getVatRegistrationNo()
    {
        return $this->container['vat_registration_no'];
    }

    /**
     * Sets vat_registration_no
     *
     * @param string|null $vat_registration_no vat_registration_no
     *
     * @return self
     */
    public function setVatRegistrationNo($vat_registration_no)
    {

        if (is_null($vat_registration_no)) {
            throw new \InvalidArgumentException('non-nullable vat_registration_no cannot be null');
        }

        $this->container['vat_registration_no'] = $vat_registration_no;

        return $this;
    }

    /**
     * Gets eori_number
     *
     * @return string|null
     */
    public function getEoriNumber()
    {
        return $this->container['eori_number'];
    }

    /**
     * Sets eori_number
     *
     * @param string|null $eori_number eori_number
     *
     * @return self
     */
    public function setEoriNumber($eori_number)
    {

        if (is_null($eori_number)) {
            throw new \InvalidArgumentException('non-nullable eori_number cannot be null');
        }

        $this->container['eori_number'] = $eori_number;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string|null
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string|null $gln gln
     *
     * @return self
     */
    public function setGln($gln)
    {

        if (is_null($gln)) {
            throw new \InvalidArgumentException('non-nullable gln cannot be null');
        }

        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets tax_liable
     *
     * @return bool|null
     */
    public function getTaxLiable()
    {
        return $this->container['tax_liable'];
    }

    /**
     * Sets tax_liable
     *
     * @param bool|null $tax_liable tax_liable
     *
     * @return self
     */
    public function setTaxLiable($tax_liable)
    {

        if (is_null($tax_liable)) {
            throw new \InvalidArgumentException('non-nullable tax_liable cannot be null');
        }

        $this->container['tax_liable'] = $tax_liable;

        return $this;
    }

    /**
     * Gets tax_area_code
     *
     * @return string|null
     */
    public function getTaxAreaCode()
    {
        return $this->container['tax_area_code'];
    }

    /**
     * Sets tax_area_code
     *
     * @param string|null $tax_area_code tax_area_code
     *
     * @return self
     */
    public function setTaxAreaCode($tax_area_code)
    {

        if (is_null($tax_area_code)) {
            throw new \InvalidArgumentException('non-nullable tax_area_code cannot be null');
        }

        $this->container['tax_area_code'] = $tax_area_code;

        return $this;
    }

    /**
     * Gets pay_to_vendor_no
     *
     * @return string|null
     */
    public function getPayToVendorNo()
    {
        return $this->container['pay_to_vendor_no'];
    }

    /**
     * Sets pay_to_vendor_no
     *
     * @param string|null $pay_to_vendor_no pay_to_vendor_no
     *
     * @return self
     */
    public function setPayToVendorNo($pay_to_vendor_no)
    {

        if (is_null($pay_to_vendor_no)) {
            throw new \InvalidArgumentException('non-nullable pay_to_vendor_no cannot be null');
        }

        $this->container['pay_to_vendor_no'] = $pay_to_vendor_no;

        return $this;
    }

    /**
     * Gets invoice_disc_code
     *
     * @return string|null
     */
    public function getInvoiceDiscCode()
    {
        return $this->container['invoice_disc_code'];
    }

    /**
     * Sets invoice_disc_code
     *
     * @param string|null $invoice_disc_code invoice_disc_code
     *
     * @return self
     */
    public function setInvoiceDiscCode($invoice_disc_code)
    {

        if (is_null($invoice_disc_code)) {
            throw new \InvalidArgumentException('non-nullable invoice_disc_code cannot be null');
        }

        $this->container['invoice_disc_code'] = $invoice_disc_code;

        return $this;
    }

    /**
     * Gets prices_including_vat
     *
     * @return bool|null
     */
    public function getPricesIncludingVat()
    {
        return $this->container['prices_including_vat'];
    }

    /**
     * Sets prices_including_vat
     *
     * @param bool|null $prices_including_vat prices_including_vat
     *
     * @return self
     */
    public function setPricesIncludingVat($prices_including_vat)
    {

        if (is_null($prices_including_vat)) {
            throw new \InvalidArgumentException('non-nullable prices_including_vat cannot be null');
        }

        $this->container['prices_including_vat'] = $prices_including_vat;

        return $this;
    }

    /**
     * Gets price_calculation_method
     *
     * @return string|null
     */
    public function getPriceCalculationMethod()
    {
        return $this->container['price_calculation_method'];
    }

    /**
     * Sets price_calculation_method
     *
     * @param string|null $price_calculation_method price_calculation_method
     *
     * @return self
     */
    public function setPriceCalculationMethod($price_calculation_method)
    {
        $allowedValues = $this->getPriceCalculationMethodAllowableValues();
        if (!is_null($price_calculation_method) && !in_array($price_calculation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'price_calculation_method', must be one of '%s'",
                    $price_calculation_method,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($price_calculation_method)) {
            throw new \InvalidArgumentException('non-nullable price_calculation_method cannot be null');
        }

        $this->container['price_calculation_method'] = $price_calculation_method;

        return $this;
    }

    /**
     * Gets gen_bus_posting_group
     *
     * @return string|null
     */
    public function getGenBusPostingGroup()
    {
        return $this->container['gen_bus_posting_group'];
    }

    /**
     * Sets gen_bus_posting_group
     *
     * @param string|null $gen_bus_posting_group gen_bus_posting_group
     *
     * @return self
     */
    public function setGenBusPostingGroup($gen_bus_posting_group)
    {

        if (is_null($gen_bus_posting_group)) {
            throw new \InvalidArgumentException('non-nullable gen_bus_posting_group cannot be null');
        }

        $this->container['gen_bus_posting_group'] = $gen_bus_posting_group;

        return $this;
    }

    /**
     * Gets vat_bus_posting_group
     *
     * @return string|null
     */
    public function getVatBusPostingGroup()
    {
        return $this->container['vat_bus_posting_group'];
    }

    /**
     * Sets vat_bus_posting_group
     *
     * @param string|null $vat_bus_posting_group vat_bus_posting_group
     *
     * @return self
     */
    public function setVatBusPostingGroup($vat_bus_posting_group)
    {

        if (is_null($vat_bus_posting_group)) {
            throw new \InvalidArgumentException('non-nullable vat_bus_posting_group cannot be null');
        }

        $this->container['vat_bus_posting_group'] = $vat_bus_posting_group;

        return $this;
    }

    /**
     * Gets vendor_posting_group
     *
     * @return string|null
     */
    public function getVendorPostingGroup()
    {
        return $this->container['vendor_posting_group'];
    }

    /**
     * Sets vendor_posting_group
     *
     * @param string|null $vendor_posting_group vendor_posting_group
     *
     * @return self
     */
    public function setVendorPostingGroup($vendor_posting_group)
    {

        if (is_null($vendor_posting_group)) {
            throw new \InvalidArgumentException('non-nullable vendor_posting_group cannot be null');
        }

        $this->container['vendor_posting_group'] = $vendor_posting_group;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {

        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets prepayment_percent
     *
     * @return float|null
     */
    public function getPrepaymentPercent()
    {
        return $this->container['prepayment_percent'];
    }

    /**
     * Sets prepayment_percent
     *
     * @param float|null $prepayment_percent prepayment_percent
     *
     * @return self
     */
    public function setPrepaymentPercent($prepayment_percent)
    {

        if (is_null($prepayment_percent)) {
            throw new \InvalidArgumentException('non-nullable prepayment_percent cannot be null');
        }

        $this->container['prepayment_percent'] = $prepayment_percent;

        return $this;
    }

    /**
     * Gets application_method
     *
     * @return string|null
     */
    public function getApplicationMethod()
    {
        return $this->container['application_method'];
    }

    /**
     * Sets application_method
     *
     * @param string|null $application_method application_method
     *
     * @return self
     */
    public function setApplicationMethod($application_method)
    {
        $allowedValues = $this->getApplicationMethodAllowableValues();
        if (!is_null($application_method) && !in_array($application_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'application_method', must be one of '%s'",
                    $application_method,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($application_method)) {
            throw new \InvalidArgumentException('non-nullable application_method cannot be null');
        }

        $this->container['application_method'] = $application_method;

        return $this;
    }

    /**
     * Gets payment_terms_code
     *
     * @return string|null
     */
    public function getPaymentTermsCode()
    {
        return $this->container['payment_terms_code'];
    }

    /**
     * Sets payment_terms_code
     *
     * @param string|null $payment_terms_code payment_terms_code
     *
     * @return self
     */
    public function setPaymentTermsCode($payment_terms_code)
    {

        if (is_null($payment_terms_code)) {
            throw new \InvalidArgumentException('non-nullable payment_terms_code cannot be null');
        }

        $this->container['payment_terms_code'] = $payment_terms_code;

        return $this;
    }

    /**
     * Gets payment_method_code
     *
     * @return string|null
     */
    public function getPaymentMethodCode()
    {
        return $this->container['payment_method_code'];
    }

    /**
     * Sets payment_method_code
     *
     * @param string|null $payment_method_code payment_method_code
     *
     * @return self
     */
    public function setPaymentMethodCode($payment_method_code)
    {

        if (is_null($payment_method_code)) {
            throw new \InvalidArgumentException('non-nullable payment_method_code cannot be null');
        }

        $this->container['payment_method_code'] = $payment_method_code;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets block_payment_tolerance
     *
     * @return bool|null
     */
    public function getBlockPaymentTolerance()
    {
        return $this->container['block_payment_tolerance'];
    }

    /**
     * Sets block_payment_tolerance
     *
     * @param bool|null $block_payment_tolerance block_payment_tolerance
     *
     * @return self
     */
    public function setBlockPaymentTolerance($block_payment_tolerance)
    {

        if (is_null($block_payment_tolerance)) {
            throw new \InvalidArgumentException('non-nullable block_payment_tolerance cannot be null');
        }

        $this->container['block_payment_tolerance'] = $block_payment_tolerance;

        return $this;
    }

    /**
     * Gets preferred_bank_account_code
     *
     * @return string|null
     */
    public function getPreferredBankAccountCode()
    {
        return $this->container['preferred_bank_account_code'];
    }

    /**
     * Sets preferred_bank_account_code
     *
     * @param string|null $preferred_bank_account_code preferred_bank_account_code
     *
     * @return self
     */
    public function setPreferredBankAccountCode($preferred_bank_account_code)
    {

        if (is_null($preferred_bank_account_code)) {
            throw new \InvalidArgumentException('non-nullable preferred_bank_account_code cannot be null');
        }

        $this->container['preferred_bank_account_code'] = $preferred_bank_account_code;

        return $this;
    }

    /**
     * Gets partner_type
     *
     * @return string|null
     */
    public function getPartnerType()
    {
        return $this->container['partner_type'];
    }

    /**
     * Sets partner_type
     *
     * @param string|null $partner_type partner_type
     *
     * @return self
     */
    public function setPartnerType($partner_type)
    {
        $allowedValues = $this->getPartnerTypeAllowableValues();
        if (!is_null($partner_type) && !in_array($partner_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'partner_type', must be one of '%s'",
                    $partner_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($partner_type)) {
            throw new \InvalidArgumentException('non-nullable partner_type cannot be null');
        }

        $this->container['partner_type'] = $partner_type;

        return $this;
    }

    /**
     * Gets cash_flow_payment_terms_code
     *
     * @return string|null
     */
    public function getCashFlowPaymentTermsCode()
    {
        return $this->container['cash_flow_payment_terms_code'];
    }

    /**
     * Sets cash_flow_payment_terms_code
     *
     * @param string|null $cash_flow_payment_terms_code cash_flow_payment_terms_code
     *
     * @return self
     */
    public function setCashFlowPaymentTermsCode($cash_flow_payment_terms_code)
    {

        if (is_null($cash_flow_payment_terms_code)) {
            throw new \InvalidArgumentException('non-nullable cash_flow_payment_terms_code cannot be null');
        }

        $this->container['cash_flow_payment_terms_code'] = $cash_flow_payment_terms_code;

        return $this;
    }

    /**
     * Gets creditor_no
     *
     * @return string|null
     */
    public function getCreditorNo()
    {
        return $this->container['creditor_no'];
    }

    /**
     * Sets creditor_no
     *
     * @param string|null $creditor_no creditor_no
     *
     * @return self
     */
    public function setCreditorNo($creditor_no)
    {

        if (is_null($creditor_no)) {
            throw new \InvalidArgumentException('non-nullable creditor_no cannot be null');
        }

        $this->container['creditor_no'] = $creditor_no;

        return $this;
    }

    /**
     * Gets giro_acc_no
     *
     * @return string|null
     */
    public function getGiroAccNo()
    {
        return $this->container['giro_acc_no'];
    }

    /**
     * Sets giro_acc_no
     *
     * @param string|null $giro_acc_no giro_acc_no
     *
     * @return self
     */
    public function setGiroAccNo($giro_acc_no)
    {

        if (is_null($giro_acc_no)) {
            throw new \InvalidArgumentException('non-nullable giro_acc_no cannot be null');
        }

        $this->container['giro_acc_no'] = $giro_acc_no;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string|null
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string|null $location_code location_code
     *
     * @return self
     */
    public function setLocationCode($location_code)
    {

        if (is_null($location_code)) {
            throw new \InvalidArgumentException('non-nullable location_code cannot be null');
        }

        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets shipment_method_code
     *
     * @return string|null
     */
    public function getShipmentMethodCode()
    {
        return $this->container['shipment_method_code'];
    }

    /**
     * Sets shipment_method_code
     *
     * @param string|null $shipment_method_code shipment_method_code
     *
     * @return self
     */
    public function setShipmentMethodCode($shipment_method_code)
    {

        if (is_null($shipment_method_code)) {
            throw new \InvalidArgumentException('non-nullable shipment_method_code cannot be null');
        }

        $this->container['shipment_method_code'] = $shipment_method_code;

        return $this;
    }

    /**
     * Gets lead_time_calculation
     *
     * @return string|null
     */
    public function getLeadTimeCalculation()
    {
        return $this->container['lead_time_calculation'];
    }

    /**
     * Sets lead_time_calculation
     *
     * @param string|null $lead_time_calculation lead_time_calculation
     *
     * @return self
     */
    public function setLeadTimeCalculation($lead_time_calculation)
    {

        if (is_null($lead_time_calculation)) {
            throw new \InvalidArgumentException('non-nullable lead_time_calculation cannot be null');
        }

        $this->container['lead_time_calculation'] = $lead_time_calculation;

        return $this;
    }

    /**
     * Gets base_calendar_code
     *
     * @return string|null
     */
    public function getBaseCalendarCode()
    {
        return $this->container['base_calendar_code'];
    }

    /**
     * Sets base_calendar_code
     *
     * @param string|null $base_calendar_code base_calendar_code
     *
     * @return self
     */
    public function setBaseCalendarCode($base_calendar_code)
    {

        if (is_null($base_calendar_code)) {
            throw new \InvalidArgumentException('non-nullable base_calendar_code cannot be null');
        }

        $this->container['base_calendar_code'] = $base_calendar_code;

        return $this;
    }

    /**
     * Gets customized_calendar
     *
     * @return string|null
     */
    public function getCustomizedCalendar()
    {
        return $this->container['customized_calendar'];
    }

    /**
     * Sets customized_calendar
     *
     * @param string|null $customized_calendar customized_calendar
     *
     * @return self
     */
    public function setCustomizedCalendar($customized_calendar)
    {

        if (is_null($customized_calendar)) {
            throw new \InvalidArgumentException('non-nullable customized_calendar cannot be null');
        }

        $this->container['customized_calendar'] = $customized_calendar;

        return $this;
    }

    /**
     * Gets over_receipt_code
     *
     * @return string|null
     */
    public function getOverReceiptCode()
    {
        return $this->container['over_receipt_code'];
    }

    /**
     * Sets over_receipt_code
     *
     * @param string|null $over_receipt_code over_receipt_code
     *
     * @return self
     */
    public function setOverReceiptCode($over_receipt_code)
    {

        if (is_null($over_receipt_code)) {
            throw new \InvalidArgumentException('non-nullable over_receipt_code cannot be null');
        }

        $this->container['over_receipt_code'] = $over_receipt_code;

        return $this;
    }

    /**
     * Gets global_dimension_1_filter
     *
     * @return string|null
     */
    public function getGlobalDimension1Filter()
    {
        return $this->container['global_dimension_1_filter'];
    }

    /**
     * Sets global_dimension_1_filter
     *
     * @param string|null $global_dimension_1_filter global_dimension_1_filter
     *
     * @return self
     */
    public function setGlobalDimension1Filter($global_dimension_1_filter)
    {

        if (is_null($global_dimension_1_filter)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_1_filter cannot be null');
        }

        $this->container['global_dimension_1_filter'] = $global_dimension_1_filter;

        return $this;
    }

    /**
     * Gets global_dimension_2_filter
     *
     * @return string|null
     */
    public function getGlobalDimension2Filter()
    {
        return $this->container['global_dimension_2_filter'];
    }

    /**
     * Sets global_dimension_2_filter
     *
     * @param string|null $global_dimension_2_filter global_dimension_2_filter
     *
     * @return self
     */
    public function setGlobalDimension2Filter($global_dimension_2_filter)
    {

        if (is_null($global_dimension_2_filter)) {
            throw new \InvalidArgumentException('non-nullable global_dimension_2_filter cannot be null');
        }

        $this->container['global_dimension_2_filter'] = $global_dimension_2_filter;

        return $this;
    }

    /**
     * Gets currency_filter
     *
     * @return string|null
     */
    public function getCurrencyFilter()
    {
        return $this->container['currency_filter'];
    }

    /**
     * Sets currency_filter
     *
     * @param string|null $currency_filter currency_filter
     *
     * @return self
     */
    public function setCurrencyFilter($currency_filter)
    {

        if (is_null($currency_filter)) {
            throw new \InvalidArgumentException('non-nullable currency_filter cannot be null');
        }

        $this->container['currency_filter'] = $currency_filter;

        return $this;
    }

    /**
     * Gets date_filter
     *
     * @return string|null
     */
    public function getDateFilter()
    {
        return $this->container['date_filter'];
    }

    /**
     * Sets date_filter
     *
     * @param string|null $date_filter date_filter
     *
     * @return self
     */
    public function setDateFilter($date_filter)
    {

        if (is_null($date_filter)) {
            throw new \InvalidArgumentException('non-nullable date_filter cannot be null');
        }

        $this->container['date_filter'] = $date_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


